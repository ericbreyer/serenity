// working cumtrapz in serenity

fun cumtrapz(f : fun(float) -> float, start:float, num_steps: int, step : float, buf: float*) {
  buf[0] = 0.0;
  for(var i = 0; i < num_steps; i = i + 1) {
    var x = start + cast(i, float) * step;
    print x;
    buf[i + 1] = buf[i] + ((f(x) + f(x + step)) / 2.0) * step;
    // print buf[i];
    // print buf[i + 1];
    // print "\n";
  }
}

var buf : float[21];
fun main() {

//let buf = cast(sbrk(21), float*);
let sentinal = cast(sbrk(1), float*);
sentinal[0] = 69.0;

cumtrapz(lambda(x : float) -> float {return cast(2, float) * x;}, 0.0, 20, 0.1, buf);

for (var i = 0; i < 21; i = i + 1) {
  print cast(cast(buf[i] * 100.0, int), float) / 100.0;
}

print sentinal[0];

  var s = "hello\nworld";
  s[0] = 'H';
  s[6] = 'W';
  print s;
  print 'F';

  var c = clock();
  for (var i = 0; i < 10; i = i + 1) {
    print i;
    while (clock() - c < 1.0) {}
    c = clock();
  }
}