// working cumtrapz in serenity

fun cumtrapz(f : fun(float) -> float, start:float, num_steps: int, step : float, buf: float*) {
  buf[0] = 0.0;
  for(var i = 0; i < num_steps; i = i + 1) {
    var x = start + cast(i, float) * step;
    buf[i + 1] = buf[i] + ((f(x) + f(x + step)) / 2.0) * step;
  }
}

fun main() {
var buf : float[21];

cumtrapz(lambda(x : float) -> float {return cast(2, float) * x;}, 0.0, 20, 0.1, buf);

for (var i = 0; i < 21; i = i + 1) {
  print cast(cast(buf[i] * 100.0, int), float) / 100.0;
}

  fun outer(const x: float) -> fun() -> float {
    fun inner() -> float {
      return x;
    }

    return inner;
  }


  var f = outer(100.0);
  print "hi";
  print f();

  var s = "hello\nworld";
  s[0] = 'H';
  s[6] = 'W';
  print s;
  print 'F';

  var c = clock();
  for (var i = 0; i < 10; i = i + 1) {
    print i;
    while (clock() - c < 1.0) {}
    c = clock();
  }
}