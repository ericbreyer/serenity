const NUM_COMPOSITES = 20;
let highly_composites: [int; NUM_COMPOSITES];

fn count_divisors(num: int) -> int {
    if(num == 1) {
        return 1;
    }
    let num_factors = 2;
    let potential_divisor = 2;
    while (potential_divisor < num) {
        if (num % potential_divisor == 0) {
            num_factors = num_factors + 1;
        }
        
        potential_divisor = potential_divisor + 1;
    }
    return num_factors;
}

fn main () -> int {
    let n = 0;
    let cur = 1;
    let max_factors = 0;
    while (n < NUM_COMPOSITES) {
        let factors = count_divisors(cur);
        if (factors > max_factors) {
            highly_composites[n] = cur;
            max_factors = factors;
            n = n + 1;
        }
        cur = cur + 1;
    }
    let i = 0;
    let fingerprint = 0;
    while (i < NUM_COMPOSITES) {
        fingerprint = fingerprint + highly_composites[i] * i;
        i = i + 1;
    }
    return fingerprint;
}