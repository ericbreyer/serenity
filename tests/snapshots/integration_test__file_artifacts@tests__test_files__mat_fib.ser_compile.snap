---
source: tests/integration_test.rs
expression: result
---
; ModuleID = 'main'
source_filename = "main"

@matMult = global { ptr } { ptr @"matMult_i64->i64->i64->i64ptr->ptr" }
@printmat = global { ptr } { ptr @printmat_i8ptr }
@str = private unnamed_addr constant [13 x i8] c"%d %d\0A%d %d\0A\00", align 1
@fib_mat = global { ptr } { ptr @"fib_mat_i64->i64->i64->i64i64" }
@fib = global { ptr } { ptr @fib_i64i64 }
@main = global { ptr } { ptr @main_i64 }

declare i8 @printf(ptr, ...)

declare ptr @malloc(i64)

declare i8 @free(ptr)

declare i8 @usleep(i64)

define { i64, i64, i64, i64 } @"matMult_i64->i64->i64->i64ptr->ptr"(ptr %0, ptr %1) {
entry:
  %struct_init = alloca { i64, i64, i64, i64 }, align 8
  %mb = alloca ptr, align 8
  %ma = alloca ptr, align 8
  store ptr %0, ptr %ma, align 8
  store ptr %1, ptr %mb, align 8
  %field = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %struct_init, i32 0, i32 0
  %rval = load ptr, ptr %ma, align 8
  %field1 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval, i32 0, i32 0
  %rval2 = load i64, ptr %field1, align 4
  %rval3 = load ptr, ptr %mb, align 8
  %field4 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval3, i32 0, i32 0
  %rval5 = load i64, ptr %field4, align 4
  %multmp = mul i64 %rval2, %rval5
  %rval6 = load ptr, ptr %ma, align 8
  %field7 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval6, i32 0, i32 1
  %rval8 = load i64, ptr %field7, align 4
  %rval9 = load ptr, ptr %mb, align 8
  %field10 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval9, i32 0, i32 2
  %rval11 = load i64, ptr %field10, align 4
  %multmp12 = mul i64 %rval8, %rval11
  %addtmp = add i64 %multmp, %multmp12
  store i64 %addtmp, ptr %field, align 4
  %field13 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %struct_init, i32 0, i32 1
  %rval14 = load ptr, ptr %ma, align 8
  %field15 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval14, i32 0, i32 0
  %rval16 = load i64, ptr %field15, align 4
  %rval17 = load ptr, ptr %mb, align 8
  %field18 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval17, i32 0, i32 1
  %rval19 = load i64, ptr %field18, align 4
  %multmp20 = mul i64 %rval16, %rval19
  %rval21 = load ptr, ptr %ma, align 8
  %field22 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval21, i32 0, i32 1
  %rval23 = load i64, ptr %field22, align 4
  %rval24 = load ptr, ptr %mb, align 8
  %field25 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval24, i32 0, i32 3
  %rval26 = load i64, ptr %field25, align 4
  %multmp27 = mul i64 %rval23, %rval26
  %addtmp28 = add i64 %multmp20, %multmp27
  store i64 %addtmp28, ptr %field13, align 4
  %field29 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %struct_init, i32 0, i32 2
  %rval30 = load ptr, ptr %ma, align 8
  %field31 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval30, i32 0, i32 2
  %rval32 = load i64, ptr %field31, align 4
  %rval33 = load ptr, ptr %mb, align 8
  %field34 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval33, i32 0, i32 0
  %rval35 = load i64, ptr %field34, align 4
  %multmp36 = mul i64 %rval32, %rval35
  %rval37 = load ptr, ptr %ma, align 8
  %field38 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval37, i32 0, i32 3
  %rval39 = load i64, ptr %field38, align 4
  %rval40 = load ptr, ptr %mb, align 8
  %field41 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval40, i32 0, i32 2
  %rval42 = load i64, ptr %field41, align 4
  %multmp43 = mul i64 %rval39, %rval42
  %addtmp44 = add i64 %multmp36, %multmp43
  store i64 %addtmp44, ptr %field29, align 4
  %field45 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %struct_init, i32 0, i32 3
  %rval46 = load ptr, ptr %ma, align 8
  %field47 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval46, i32 0, i32 2
  %rval48 = load i64, ptr %field47, align 4
  %rval49 = load ptr, ptr %mb, align 8
  %field50 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval49, i32 0, i32 1
  %rval51 = load i64, ptr %field50, align 4
  %multmp52 = mul i64 %rval48, %rval51
  %rval53 = load ptr, ptr %ma, align 8
  %field54 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval53, i32 0, i32 3
  %rval55 = load i64, ptr %field54, align 4
  %rval56 = load ptr, ptr %mb, align 8
  %field57 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval56, i32 0, i32 3
  %rval58 = load i64, ptr %field57, align 4
  %multmp59 = mul i64 %rval55, %rval58
  %addtmp60 = add i64 %multmp52, %multmp59
  store i64 %addtmp60, ptr %field45, align 4
  %struct_init61 = load { i64, i64, i64, i64 }, ptr %struct_init, align 4
  ret { i64, i64, i64, i64 } %struct_init61
}

define i8 @printmat_i8ptr(ptr %0) {
entry:
  %m = alloca ptr, align 8
  store ptr %0, ptr %m, align 8
  %rval = load ptr, ptr @printf, align 8
  %rval1 = load ptr, ptr %m, align 8
  %field = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval1, i32 0, i32 0
  %rval2 = load i64, ptr %field, align 4
  %rval3 = load ptr, ptr %m, align 8
  %field4 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval3, i32 0, i32 1
  %rval5 = load i64, ptr %field4, align 4
  %rval6 = load ptr, ptr %m, align 8
  %field7 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval6, i32 0, i32 2
  %rval8 = load i64, ptr %field7, align 4
  %rval9 = load ptr, ptr %m, align 8
  %field10 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %rval9, i32 0, i32 3
  %rval11 = load i64, ptr %field10, align 4
  %calltmp = call i8 (ptr, ...) @printf(ptr @str, i64 %rval2, i64 %rval5, i64 %rval8, i64 %rval11)
  ret i8 0
}

define { i64, i64, i64, i64 } @"fib_mat_i64->i64->i64->i64i64"(i64 %0) {
entry:
  %calltmp35 = alloca { i64, i64, i64, i64 }, align 8
  %calltmp30 = alloca { i64, i64, i64, i64 }, align 8
  %halfSquared = alloca { i64, i64, i64, i64 }, align 8
  %extra = alloca { i64, i64, i64, i64 }, align 8
  %calltmp19 = alloca { i64, i64, i64, i64 }, align 8
  %half = alloca { i64, i64, i64, i64 }, align 8
  %struct_init5 = alloca { i64, i64, i64, i64 }, align 8
  %identity = alloca { i64, i64, i64, i64 }, align 8
  %struct_init = alloca { i64, i64, i64, i64 }, align 8
  %baseMat = alloca { i64, i64, i64, i64 }, align 8
  %n = alloca i64, align 8
  store i64 %0, ptr %n, align 4
  %field = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %struct_init, i32 0, i32 0
  store i64 1, ptr %field, align 4
  %field1 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %struct_init, i32 0, i32 1
  store i64 1, ptr %field1, align 4
  %field2 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %struct_init, i32 0, i32 2
  store i64 1, ptr %field2, align 4
  %field3 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %struct_init, i32 0, i32 3
  store i64 0, ptr %field3, align 4
  %struct_init4 = load { i64, i64, i64, i64 }, ptr %struct_init, align 4
  store { i64, i64, i64, i64 } %struct_init4, ptr %baseMat, align 4
  %field6 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %struct_init5, i32 0, i32 0
  store i64 1, ptr %field6, align 4
  %field7 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %struct_init5, i32 0, i32 1
  store i64 0, ptr %field7, align 4
  %field8 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %struct_init5, i32 0, i32 2
  store i64 0, ptr %field8, align 4
  %field9 = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %struct_init5, i32 0, i32 3
  store i64 1, ptr %field9, align 4
  %struct_init10 = load { i64, i64, i64, i64 }, ptr %struct_init5, align 4
  store { i64, i64, i64, i64 } %struct_init10, ptr %identity, align 4
  %rval = load i64, ptr %n, align 4
  %eqtmp = icmp eq i64 %rval, 0
  br i1 %eqtmp, label %then, label %else

then:                                             ; preds = %entry
  %rval11 = load { i64, i64, i64, i64 }, ptr %identity, align 4
  ret { i64, i64, i64, i64 } %rval11

else:                                             ; preds = %entry
  br label %ifcont

ifcont:                                           ; preds = %else
  %rval15 = load i64, ptr %n, align 4
  %letmp = icmp sle i64 %rval15, 1
  br i1 %letmp, label %then12, label %else13

then12:                                           ; preds = %ifcont
  %rval16 = load { i64, i64, i64, i64 }, ptr %baseMat, align 4
  ret { i64, i64, i64, i64 } %rval16

else13:                                           ; preds = %ifcont
  br label %ifcont14

ifcont14:                                         ; preds = %else13
  %rval17 = load { ptr }, ptr @fib_mat, align 8
  %rval18 = load i64, ptr %n, align 4
  %divtmp = sdiv i64 %rval18, 2
  %fnptr = extractvalue { ptr } %rval17, 0
  %calltmp = call { i64, i64, i64, i64 } %fnptr(i64 %divtmp)
  store { i64, i64, i64, i64 } %calltmp, ptr %calltmp19, align 4
  %rval20 = load { i64, i64, i64, i64 }, ptr %calltmp19, align 4
  store { i64, i64, i64, i64 } %rval20, ptr %half, align 4
  %rval21 = load i64, ptr %n, align 4
  %remtmp = srem i64 %rval21, 2
  %eqtmp22 = icmp eq i64 %remtmp, 0
  br i1 %eqtmp22, label %then23, label %else24

then23:                                           ; preds = %ifcont14
  %rval25 = load { i64, i64, i64, i64 }, ptr %identity, align 4
  br label %merge

else24:                                           ; preds = %ifcont14
  %rval26 = load { i64, i64, i64, i64 }, ptr %baseMat, align 4
  br label %merge

merge:                                            ; preds = %else24, %then23
  %iftmp = phi { i64, i64, i64, i64 } [ %rval25, %then23 ], [ %rval26, %else24 ]
  store { i64, i64, i64, i64 } %iftmp, ptr %extra, align 4
  %rval27 = load { ptr }, ptr @matMult, align 8
  %fnptr28 = extractvalue { ptr } %rval27, 0
  %calltmp29 = call { i64, i64, i64, i64 } %fnptr28(ptr %half, ptr %half)
  store { i64, i64, i64, i64 } %calltmp29, ptr %calltmp30, align 4
  %rval31 = load { i64, i64, i64, i64 }, ptr %calltmp30, align 4
  store { i64, i64, i64, i64 } %rval31, ptr %halfSquared, align 4
  %rval32 = load { ptr }, ptr @matMult, align 8
  %fnptr33 = extractvalue { ptr } %rval32, 0
  %calltmp34 = call { i64, i64, i64, i64 } %fnptr33(ptr %extra, ptr %halfSquared)
  store { i64, i64, i64, i64 } %calltmp34, ptr %calltmp35, align 4
  %rval36 = load { i64, i64, i64, i64 }, ptr %calltmp35, align 4
  ret { i64, i64, i64, i64 } %rval36
}

define i64 @fib_i64i64(i64 %0) {
entry:
  %calltmp2 = alloca { i64, i64, i64, i64 }, align 8
  %n = alloca i64, align 8
  store i64 %0, ptr %n, align 4
  %rval = load { ptr }, ptr @fib_mat, align 8
  %rval1 = load i64, ptr %n, align 4
  %fnptr = extractvalue { ptr } %rval, 0
  %calltmp = call { i64, i64, i64, i64 } %fnptr(i64 %rval1)
  store { i64, i64, i64, i64 } %calltmp, ptr %calltmp2, align 4
  %field = getelementptr inbounds nuw { i64, i64, i64, i64 }, ptr %calltmp2, i32 0, i32 1
  %rval3 = load i64, ptr %field, align 4
  ret i64 %rval3
}

define i64 @main_i64() {
entry:
  %calltmp3 = alloca i64, align 8
  %f = alloca i64, align 8
  %i = alloca i64, align 8
  %ret = alloca i64, align 8
  store i64 0, ptr %ret, align 4
  store i64 0, ptr %i, align 4
  br label %loop_44

loop_44:                                          ; preds = %body_44, %entry
  %rval = load i64, ptr %i, align 4
  %lttmp = icmp slt i64 %rval, 30
  br i1 %lttmp, label %body_44, label %merge_44

body_44:                                          ; preds = %loop_44
  %rval1 = load { ptr }, ptr @fib, align 8
  %rval2 = load i64, ptr %i, align 4
  %fnptr = extractvalue { ptr } %rval1, 0
  %calltmp = call i64 %fnptr(i64 %rval2)
  store i64 %calltmp, ptr %calltmp3, align 4
  %rval4 = load i64, ptr %calltmp3, align 4
  store i64 %rval4, ptr %f, align 4
  %rval5 = load i64, ptr %ret, align 4
  %rval6 = load i64, ptr %f, align 4
  %addtmp = add i64 %rval5, %rval6
  store i64 %addtmp, ptr %ret, align 4
  %rval7 = load i64, ptr %i, align 4
  %addtmp8 = add i64 %rval7, 1
  store i64 %addtmp8, ptr %i, align 4
  br label %loop_44

merge_44:                                         ; preds = %loop_44
  %rval9 = load i64, ptr %ret, align 4
  ret i64 %rval9
}
