---
source: tests/integration_test.rs
expression: result
---
; ModuleID = 'main'
source_filename = "main"

@"9688406665803032424_next" = global { ptr } { ptr @"9688406665803032424_next_ptr->ptrptr" }
@"15292438991726710161_next" = global { ptr } { ptr @"15292438991726710161_next_ptr->ptrptr" }
@nat_gen_generator_vtable = global { { ptr } } zeroinitializer
@nat_gen_impl_generator = global { ptr } { ptr @"nat_gen_impl_generator_ptr->ptrptr" }
@main = global { ptr } { ptr @main_i64 }

declare i8 @printf(ptr, ...)

declare ptr @malloc(i64)

declare i8 @free(ptr)

declare i8 @usleep(i64)

define { ptr, ptr } @"9688406665803032424_next_ptr->ptrptr"(ptr %0) {
entry:
  %closure = alloca { ptr, ptr }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %self1 = load ptr, ptr %self, align 8
  %upval = getelementptr inbounds nuw { ptr, ptr }, ptr %closure, i32 0, i32 0
  store ptr %self1, ptr %upval, align 8
  %upval2 = getelementptr inbounds nuw { ptr, ptr }, ptr %closure, i32 0, i32 1
  store ptr @"9688406665803032424_next_inner_i64ptr", ptr %upval2, align 8
  %closure3 = load { ptr, ptr }, ptr %closure, align 8
  ret { ptr, ptr } %closure3
}

define i64 @"9688406665803032424_next_inner_i64ptr"(ptr %0) {
entry:
  %calltmp10 = alloca i64, align 8
  %calltmp6 = alloca { ptr, ptr }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %rval = load ptr, ptr %self, align 8
  %field = getelementptr inbounds nuw { ptr, { { ptr } } }, ptr %rval, i32 0, i32 1
  %field1 = getelementptr inbounds nuw { { ptr } }, ptr %field, i32 0, i32 0
  %rval2 = load { ptr }, ptr %field1, align 8
  %rval3 = load ptr, ptr %self, align 8
  %field4 = getelementptr inbounds nuw { ptr, { { ptr } } }, ptr %rval3, i32 0, i32 0
  %rval5 = load ptr, ptr %field4, align 8
  %fnptr = extractvalue { ptr } %rval2, 0
  %calltmp = call { ptr, ptr } %fnptr(ptr %rval5)
  store { ptr, ptr } %calltmp, ptr %calltmp6, align 8
  %rval7 = load { ptr, ptr }, ptr %calltmp6, align 8
  %fnptr8 = extractvalue { ptr, ptr } %rval7, 1
  %upval = extractvalue { ptr, ptr } %rval7, 0
  %calltmp9 = call i64 %fnptr8(ptr %upval)
  store i64 %calltmp9, ptr %calltmp10, align 4
  %rval11 = load i64, ptr %calltmp10, align 4
  ret i64 %rval11
}

define { ptr, ptr } @"15292438991726710161_next_ptr->ptrptr"(ptr %0) {
entry:
  %closure7 = alloca { ptr, ptr }, align 8
  %self5 = alloca ptr, align 8
  %closure = alloca { ptr, ptr }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %self1 = load ptr, ptr %self, align 8
  %upval = getelementptr inbounds nuw { ptr, ptr }, ptr %closure, i32 0, i32 0
  store ptr %self1, ptr %upval, align 8
  %upval2 = getelementptr inbounds nuw { ptr, ptr }, ptr %closure, i32 0, i32 1
  store ptr @"15292438991726710161_next_inner_i64ptr", ptr %upval2, align 8
  %closure3 = load { ptr, ptr }, ptr %closure, align 8
  ret { ptr, ptr } %closure3

entry4:                                           ; No predecessors!
  store ptr %0, ptr %self5, align 8
  %self6 = load ptr, ptr %self5, align 8
  %upval8 = getelementptr inbounds nuw { ptr, ptr }, ptr %closure7, i32 0, i32 0
  store ptr %self6, ptr %upval8, align 8
  %upval9 = getelementptr inbounds nuw { ptr, ptr }, ptr %closure7, i32 0, i32 1
  store ptr @"15292438991726710161_next_inner_i64ptr", ptr %upval9, align 8
  %closure10 = load { ptr, ptr }, ptr %closure7, align 8
  ret { ptr, ptr } %closure10
}

define i64 @"15292438991726710161_next_inner_i64ptr"(ptr %0) {
entry:
  %i = alloca i64, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %rval = load ptr, ptr %self, align 8
  %field = getelementptr inbounds nuw { i64 }, ptr %rval, i32 0, i32 0
  %rval1 = load i64, ptr %field, align 4
  store i64 %rval1, ptr %i, align 4
  %rval2 = load i64, ptr %i, align 4
  %addtmp = add i64 %rval2, 1
  %rval3 = load ptr, ptr %self, align 8
  %field4 = getelementptr inbounds nuw { i64 }, ptr %rval3, i32 0, i32 0
  store i64 %addtmp, ptr %field4, align 4
  %rval5 = load i64, ptr %i, align 4
  ret i64 %rval5
}

define { ptr, { { ptr } } } @"nat_gen_impl_generator_ptr->ptrptr"(ptr %0) {
entry:
  %struct_init = alloca { ptr, { { ptr } } }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %rval = load { ptr }, ptr @"15292438991726710161_next", align 8
  store { ptr } %rval, ptr @nat_gen_generator_vtable, align 8
  %field = getelementptr inbounds nuw { ptr, { { ptr } } }, ptr %struct_init, i32 0, i32 0
  %rval1 = load ptr, ptr %self, align 8
  store ptr %rval1, ptr %field, align 8
  %field2 = getelementptr inbounds nuw { ptr, { { ptr } } }, ptr %struct_init, i32 0, i32 1
  %rval3 = load { { ptr } }, ptr @nat_gen_generator_vtable, align 8
  store { { ptr } } %rval3, ptr %field2, align 8
  %struct_init4 = load { ptr, { { ptr } } }, ptr %struct_init, align 8
  ret { ptr, { { ptr } } } %struct_init4
}

define i64 @main_i64() {
entry:
  %calltmp21 = alloca i64, align 8
  %calltmp16 = alloca { ptr, ptr }, align 8
  %calltmp11 = alloca i64, align 8
  %calltmp7 = alloca { ptr, ptr }, align 8
  %calltmp2 = alloca { ptr, { { ptr } } }, align 8
  %g = alloca { ptr, { { ptr } } }, align 8
  %struct_init = alloca { i64 }, align 8
  %gen = alloca { i64 }, align 8
  %field = getelementptr inbounds nuw { i64 }, ptr %struct_init, i32 0, i32 0
  store i64 0, ptr %field, align 4
  %struct_init1 = load { i64 }, ptr %struct_init, align 4
  store { i64 } %struct_init1, ptr %gen, align 4
  %rval = load { ptr }, ptr @nat_gen_impl_generator, align 8
  %fnptr = extractvalue { ptr } %rval, 0
  %calltmp = call { ptr, { { ptr } } } %fnptr(ptr %gen)
  store { ptr, { { ptr } } } %calltmp, ptr %calltmp2, align 8
  %rval3 = load { ptr, { { ptr } } }, ptr %calltmp2, align 8
  store { ptr, { { ptr } } } %rval3, ptr %g, align 8
  %rval4 = load { ptr }, ptr @"9688406665803032424_next", align 8
  %fnptr5 = extractvalue { ptr } %rval4, 0
  %calltmp6 = call { ptr, ptr } %fnptr5(ptr %g)
  store { ptr, ptr } %calltmp6, ptr %calltmp7, align 8
  %rval8 = load { ptr, ptr }, ptr %calltmp7, align 8
  %fnptr9 = extractvalue { ptr, ptr } %rval8, 1
  %upval = extractvalue { ptr, ptr } %rval8, 0
  %calltmp10 = call i64 %fnptr9(ptr %upval)
  store i64 %calltmp10, ptr %calltmp11, align 4
  %rval12 = load i64, ptr %calltmp11, align 4
  %rval13 = load { ptr }, ptr @"9688406665803032424_next", align 8
  %fnptr14 = extractvalue { ptr } %rval13, 0
  %calltmp15 = call { ptr, ptr } %fnptr14(ptr %g)
  store { ptr, ptr } %calltmp15, ptr %calltmp16, align 8
  %rval17 = load { ptr, ptr }, ptr %calltmp16, align 8
  %fnptr18 = extractvalue { ptr, ptr } %rval17, 1
  %upval19 = extractvalue { ptr, ptr } %rval17, 0
  %calltmp20 = call i64 %fnptr18(ptr %upval19)
  store i64 %calltmp20, ptr %calltmp21, align 4
  %rval22 = load i64, ptr %calltmp21, align 4
  %addtmp = add i64 %rval12, %rval22
  ret i64 %addtmp
}
