---
source: tests/integration_test.rs
expression: ast
---
[line    2] Var Declaration: highly_composites
[line    4] Function Declaration: count_divisors
[line    4] ╰─── Function Expression:
[line    4]      ├─── Name: count_divisors
[line    4]      ├─── Return Type: int
[line    4]      ├─── Params:
[line    4]      │    ╰─── num: int
[line    4]      ╰─── Body: 
[line    5]           ├─── If: 
[line    5]           │    ├─── Binary: EqualEqual
[line    5]           │    │    ├─── Variable: <Identifier   "num"         [5]>
[line    5]           │    │    ╰─── Literal: 1
[line    5]           │    ╰─── Block: 
[line    5]           │         ╰─── Return:
[line    6]           │              ╰─── Literal: 1
[line    8]           ├─── Var Declaration: num_factors
[line    8]           │    ╰───  Initializer
[line    8]           │         ╰─── Literal: 2
[line    9]           ├─── Var Declaration: potential_divisor
[line    9]           │    ╰───  Initializer
[line    9]           │         ╰─── Literal: 2
[line   10]           ├─── While: 
[line   10]           │    ├─── Binary: Less
[line   10]           │    │    ├─── Variable: <Identifier   "potential_divisor" [10]>
[line   10]           │    │    ╰─── Variable: <Identifier   "num"         [10]>
[line   10]           │    ╰─── Block: 
[line   11]           │         ├─── If: 
[line   11]           │         │    ├─── Binary: EqualEqual
[line   11]           │         │    │    ├─── Binary: Percent
[line   11]           │         │    │    │    ├─── Variable: <Identifier   "num"         [11]>
[line   11]           │         │    │    │    ╰─── Variable: <Identifier   "potential_divisor" [11]>
[line   11]           │         │    │    ╰─── Literal: 0
[line   11]           │         │    ╰─── Block: 
[line   12]           │         │         ╰─── Expression: 
[line   12]           │         │              ╰─── Assign:
[line   12]           │         │                   ├─── Variable: <Identifier   "num_factors" [12]>
[line   12]           │         │                   ╰─── Binary: Plus
[line   12]           │         │                        ├─── Variable: <Identifier   "num_factors" [12]>
[line   12]           │         │                        ╰─── Literal: 1
[line   15]           │         ╰─── Expression: 
[line   15]           │              ╰─── Assign:
[line   15]           │                   ├─── Variable: <Identifier   "potential_divisor" [15]>
[line   15]           │                   ╰─── Binary: Plus
[line   15]           │                        ├─── Variable: <Identifier   "potential_divisor" [15]>
[line   15]           │                        ╰─── Literal: 1
[line   16]           ╰─── Return:
[line   17]                ╰─── Variable: <Identifier   "num_factors" [17]>
[line   20] Function Declaration: main
[line   20] ╰─── Function Expression:
[line   20]      ├─── Name: main
[line   20]      ├─── Return Type: int
[line   20]      ╰─── Body: 
[line   21]           ├─── Var Declaration: n
[line   21]           │    ╰───  Initializer
[line   21]           │         ╰─── Literal: 0
[line   22]           ├─── Var Declaration: cur
[line   22]           │    ╰───  Initializer
[line   22]           │         ╰─── Literal: 1
[line   23]           ├─── Var Declaration: max_factors
[line   23]           │    ╰───  Initializer
[line   23]           │         ╰─── Literal: 0
[line   24]           ├─── While: 
[line   24]           │    ├─── Binary: Less
[line   24]           │    │    ├─── Variable: <Identifier   "n"           [24]>
[line   24]           │    │    ╰─── Literal: 20
[line   24]           │    ╰─── Block: 
[line   25]           │         ├─── Var Declaration: factors
[line   25]           │         │    ╰───  Initializer
[line   25]           │         │         ╰─── Call:
[line   25]           │         │              ├─── Variable: <Identifier   "count_divisors" [25]>
[line   25]           │         │              ╰─── Variable: <Identifier   "cur"         [25]>
[line   26]           │         ├─── If: 
[line   26]           │         │    ├─── Binary: Greater
[line   26]           │         │    │    ├─── Variable: <Identifier   "factors"     [26]>
[line   26]           │         │    │    ╰─── Variable: <Identifier   "max_factors" [26]>
[line   26]           │         │    ╰─── Block: 
[line   27]           │         │         ├─── Expression: 
[line   27]           │         │         │    ╰─── Assign:
[line   27]           │         │         │         ├─── Index:
[line   27]           │         │         │         │    ├─── Variable: <Identifier   "highly_composites" [27]>
[line   27]           │         │         │         │    ╰─── Variable: <Identifier   "n"           [27]>
[line   27]           │         │         │         ╰─── Variable: <Identifier   "cur"         [27]>
[line   28]           │         │         ├─── Expression: 
[line   28]           │         │         │    ╰─── Assign:
[line   28]           │         │         │         ├─── Variable: <Identifier   "max_factors" [28]>
[line   28]           │         │         │         ╰─── Variable: <Identifier   "factors"     [28]>
[line   29]           │         │         ╰─── Expression: 
[line   29]           │         │              ╰─── Assign:
[line   29]           │         │                   ├─── Variable: <Identifier   "n"           [29]>
[line   29]           │         │                   ╰─── Binary: Plus
[line   29]           │         │                        ├─── Variable: <Identifier   "n"           [29]>
[line   29]           │         │                        ╰─── Literal: 1
[line   31]           │         ╰─── Expression: 
[line   31]           │              ╰─── Assign:
[line   31]           │                   ├─── Variable: <Identifier   "cur"         [31]>
[line   31]           │                   ╰─── Binary: Plus
[line   31]           │                        ├─── Variable: <Identifier   "cur"         [31]>
[line   31]           │                        ╰─── Literal: 1
[line   33]           ├─── Var Declaration: i
[line   33]           │    ╰───  Initializer
[line   33]           │         ╰─── Literal: 0
[line   34]           ├─── Var Declaration: fingerprint
[line   34]           │    ╰───  Initializer
[line   34]           │         ╰─── Literal: 0
[line   35]           ├─── While: 
[line   35]           │    ├─── Binary: Less
[line   35]           │    │    ├─── Variable: <Identifier   "i"           [35]>
[line   35]           │    │    ╰─── Literal: 20
[line   35]           │    ╰─── Block: 
[line   36]           │         ├─── Expression: 
[line   36]           │         │    ╰─── Assign:
[line   36]           │         │         ├─── Variable: <Identifier   "fingerprint" [36]>
[line   36]           │         │         ╰─── Binary: Plus
[line   36]           │         │              ├─── Variable: <Identifier   "fingerprint" [36]>
[line   36]           │         │              ╰─── Binary: Star
[line   36]           │         │                   ├─── Index:
[line   36]           │         │                   │    ├─── Variable: <Identifier   "highly_composites" [36]>
[line   36]           │         │                   │    ╰─── Variable: <Identifier   "i"           [36]>
[line   36]           │         │                   ╰─── Variable: <Identifier   "i"           [36]>
[line   37]           │         ╰─── Expression: 
[line   37]           │              ╰─── Assign:
[line   37]           │                   ├─── Variable: <Identifier   "i"           [37]>
[line   37]           │                   ╰─── Binary: Plus
[line   37]           │                        ├─── Variable: <Identifier   "i"           [37]>
[line   37]           │                        ╰─── Literal: 1
[line   38]           ╰─── Return:
[line   39]                ╰─── Variable: <Identifier   "fingerprint" [39]>
