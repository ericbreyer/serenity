---
source: tests/integration_test.rs
expression: result
---
; ModuleID = 'main'
source_filename = "main"

@"9688406665803032424_next" = global { ptr } { ptr @"9688406665803032424_next_ptr->ptrptr" }
@"15292438991726710161_next" = global { ptr } { ptr @"15292438991726710161_next_ptr->ptrptr" }
@nat_gen_generator_vtable = global { { ptr } } zeroinitializer
@nat_gen_impl_generator = global { ptr } { ptr @"nat_gen_impl_generator_ptr->ptrptr" }
@"15864711494133240056_next" = global { ptr } { ptr @"15864711494133240056_next_ptr->ptrptr" }
@identity_generator_vtable = global { { ptr } } zeroinitializer
@identity_impl_generator = global { ptr } { ptr @"identity_impl_generator_ptr->ptrptr" }
@"12770340728795463017_next" = global { ptr } { ptr @"12770340728795463017_next_ptr->ptrptr" }
@filter_generator_vtable = global { { ptr } } zeroinitializer
@filter_impl_generator = global { ptr } { ptr @"filter_impl_generator_ptr->ptrptr" }
@"12868915959732643263_next" = global { ptr } { ptr @"12868915959732643263_next_ptr->ptrptr" }
@seive_generator_vtable = global { { ptr } } zeroinitializer
@seive_impl_generator = global { ptr } { ptr @"seive_impl_generator_ptr->ptrptr" }
@main = global { ptr } { ptr @main_i64 }

declare i8 @printf(ptr, ...)

declare ptr @malloc(i64)

declare i8 @free(ptr)

declare i8 @usleep(i64)

define { ptr, ptr } @"9688406665803032424_next_ptr->ptrptr"(ptr %0) {
entry:
  %closure = alloca { ptr, ptr }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %self1 = load ptr, ptr %self, align 8
  %upval = getelementptr inbounds nuw { ptr, ptr }, ptr %closure, i32 0, i32 0
  store ptr %self1, ptr %upval, align 8
  %upval2 = getelementptr inbounds nuw { ptr, ptr }, ptr %closure, i32 0, i32 1
  store ptr @"9688406665803032424_next_inner_i64ptr", ptr %upval2, align 8
  %closure3 = load { ptr, ptr }, ptr %closure, align 8
  ret { ptr, ptr } %closure3
}

define i64 @"9688406665803032424_next_inner_i64ptr"(ptr %0) {
entry:
  %calltmp10 = alloca i64, align 8
  %calltmp6 = alloca { ptr, ptr }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %rval = load ptr, ptr %self, align 8
  %field = getelementptr inbounds nuw { ptr, { { ptr } } }, ptr %rval, i32 0, i32 1
  %field1 = getelementptr inbounds nuw { { ptr } }, ptr %field, i32 0, i32 0
  %rval2 = load { ptr }, ptr %field1, align 8
  %rval3 = load ptr, ptr %self, align 8
  %field4 = getelementptr inbounds nuw { ptr, { { ptr } } }, ptr %rval3, i32 0, i32 0
  %rval5 = load ptr, ptr %field4, align 8
  %fnptr = extractvalue { ptr } %rval2, 0
  %calltmp = call { ptr, ptr } %fnptr(ptr %rval5)
  store { ptr, ptr } %calltmp, ptr %calltmp6, align 8
  %rval7 = load { ptr, ptr }, ptr %calltmp6, align 8
  %fnptr8 = extractvalue { ptr, ptr } %rval7, 1
  %upval = extractvalue { ptr, ptr } %rval7, 0
  %calltmp9 = call i64 %fnptr8(ptr %upval)
  store i64 %calltmp9, ptr %calltmp10, align 4
  %rval11 = load i64, ptr %calltmp10, align 4
  ret i64 %rval11
}

define { ptr, ptr } @"15292438991726710161_next_ptr->ptrptr"(ptr %0) {
entry:
  %closure7 = alloca { ptr, ptr }, align 8
  %self5 = alloca ptr, align 8
  %closure = alloca { ptr, ptr }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %self1 = load ptr, ptr %self, align 8
  %upval = getelementptr inbounds nuw { ptr, ptr }, ptr %closure, i32 0, i32 0
  store ptr %self1, ptr %upval, align 8
  %upval2 = getelementptr inbounds nuw { ptr, ptr }, ptr %closure, i32 0, i32 1
  store ptr @"15292438991726710161_next_inner_i64ptr", ptr %upval2, align 8
  %closure3 = load { ptr, ptr }, ptr %closure, align 8
  ret { ptr, ptr } %closure3

entry4:                                           ; No predecessors!
  store ptr %0, ptr %self5, align 8
  %self6 = load ptr, ptr %self5, align 8
  %upval8 = getelementptr inbounds nuw { ptr, ptr }, ptr %closure7, i32 0, i32 0
  store ptr %self6, ptr %upval8, align 8
  %upval9 = getelementptr inbounds nuw { ptr, ptr }, ptr %closure7, i32 0, i32 1
  store ptr @"15292438991726710161_next_inner_i64ptr", ptr %upval9, align 8
  %closure10 = load { ptr, ptr }, ptr %closure7, align 8
  ret { ptr, ptr } %closure10
}

define i64 @"15292438991726710161_next_inner_i64ptr"(ptr %0) {
entry:
  %i = alloca i64, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %rval = load ptr, ptr %self, align 8
  %field = getelementptr inbounds nuw { i64 }, ptr %rval, i32 0, i32 0
  %rval1 = load i64, ptr %field, align 4
  store i64 %rval1, ptr %i, align 4
  %rval2 = load i64, ptr %i, align 4
  %addtmp = add i64 %rval2, 1
  %rval3 = load ptr, ptr %self, align 8
  %field4 = getelementptr inbounds nuw { i64 }, ptr %rval3, i32 0, i32 0
  store i64 %addtmp, ptr %field4, align 4
  %rval5 = load i64, ptr %i, align 4
  ret i64 %rval5
}

define { ptr, { { ptr } } } @"nat_gen_impl_generator_ptr->ptrptr"(ptr %0) {
entry:
  %struct_init = alloca { ptr, { { ptr } } }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %rval = load { ptr }, ptr @"15292438991726710161_next", align 8
  store { ptr } %rval, ptr @nat_gen_generator_vtable, align 8
  %field = getelementptr inbounds nuw { ptr, { { ptr } } }, ptr %struct_init, i32 0, i32 0
  %rval1 = load ptr, ptr %self, align 8
  store ptr %rval1, ptr %field, align 8
  %field2 = getelementptr inbounds nuw { ptr, { { ptr } } }, ptr %struct_init, i32 0, i32 1
  %rval3 = load { { ptr } }, ptr @nat_gen_generator_vtable, align 8
  store { { ptr } } %rval3, ptr %field2, align 8
  %struct_init4 = load { ptr, { { ptr } } }, ptr %struct_init, align 8
  ret { ptr, { { ptr } } } %struct_init4
}

define { ptr, ptr } @"15864711494133240056_next_ptr->ptrptr"(ptr %0) {
entry:
  %closure7 = alloca { ptr, ptr }, align 8
  %self5 = alloca ptr, align 8
  %closure = alloca { ptr, ptr }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %self1 = load ptr, ptr %self, align 8
  %upval = getelementptr inbounds nuw { ptr, ptr }, ptr %closure, i32 0, i32 0
  store ptr %self1, ptr %upval, align 8
  %upval2 = getelementptr inbounds nuw { ptr, ptr }, ptr %closure, i32 0, i32 1
  store ptr @"15864711494133240056_next_inner_i64ptr", ptr %upval2, align 8
  %closure3 = load { ptr, ptr }, ptr %closure, align 8
  ret { ptr, ptr } %closure3

entry4:                                           ; No predecessors!
  store ptr %0, ptr %self5, align 8
  %self6 = load ptr, ptr %self5, align 8
  %upval8 = getelementptr inbounds nuw { ptr, ptr }, ptr %closure7, i32 0, i32 0
  store ptr %self6, ptr %upval8, align 8
  %upval9 = getelementptr inbounds nuw { ptr, ptr }, ptr %closure7, i32 0, i32 1
  store ptr @"15864711494133240056_next_inner_i64ptr", ptr %upval9, align 8
  %closure10 = load { ptr, ptr }, ptr %closure7, align 8
  ret { ptr, ptr } %closure10
}

define i64 @"15864711494133240056_next_inner_i64ptr"(ptr %0) {
entry:
  %calltmp8 = alloca i64, align 8
  %calltmp4 = alloca { ptr, ptr }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %rval = load ptr, ptr %self, align 8
  %field = getelementptr inbounds nuw { { ptr, { { ptr } } } }, ptr %rval, i32 0, i32 0
  %rval1 = load { ptr }, ptr @"9688406665803032424_next", align 8
  %rval2 = load ptr, ptr %self, align 8
  %field3 = getelementptr inbounds nuw { { ptr, { { ptr } } } }, ptr %rval2, i32 0, i32 0
  %fnptr = extractvalue { ptr } %rval1, 0
  %calltmp = call { ptr, ptr } %fnptr(ptr %field3)
  store { ptr, ptr } %calltmp, ptr %calltmp4, align 8
  %rval5 = load { ptr, ptr }, ptr %calltmp4, align 8
  %fnptr6 = extractvalue { ptr, ptr } %rval5, 1
  %upval = extractvalue { ptr, ptr } %rval5, 0
  %calltmp7 = call i64 %fnptr6(ptr %upval)
  store i64 %calltmp7, ptr %calltmp8, align 4
  %rval9 = load i64, ptr %calltmp8, align 4
  ret i64 %rval9
}

define { ptr, { { ptr } } } @"identity_impl_generator_ptr->ptrptr"(ptr %0) {
entry:
  %struct_init = alloca { ptr, { { ptr } } }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %rval = load { ptr }, ptr @"15864711494133240056_next", align 8
  store { ptr } %rval, ptr @identity_generator_vtable, align 8
  %field = getelementptr inbounds nuw { ptr, { { ptr } } }, ptr %struct_init, i32 0, i32 0
  %rval1 = load ptr, ptr %self, align 8
  store ptr %rval1, ptr %field, align 8
  %field2 = getelementptr inbounds nuw { ptr, { { ptr } } }, ptr %struct_init, i32 0, i32 1
  %rval3 = load { { ptr } }, ptr @identity_generator_vtable, align 8
  store { { ptr } } %rval3, ptr %field2, align 8
  %struct_init4 = load { ptr, { { ptr } } }, ptr %struct_init, align 8
  ret { ptr, { { ptr } } } %struct_init4
}

define { ptr, ptr } @"12770340728795463017_next_ptr->ptrptr"(ptr %0) {
entry:
  %closure7 = alloca { ptr, ptr }, align 8
  %self5 = alloca ptr, align 8
  %closure = alloca { ptr, ptr }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %self1 = load ptr, ptr %self, align 8
  %upval = getelementptr inbounds nuw { ptr, ptr }, ptr %closure, i32 0, i32 0
  store ptr %self1, ptr %upval, align 8
  %upval2 = getelementptr inbounds nuw { ptr, ptr }, ptr %closure, i32 0, i32 1
  store ptr @"12770340728795463017_next_inner_i64ptr", ptr %upval2, align 8
  %closure3 = load { ptr, ptr }, ptr %closure, align 8
  ret { ptr, ptr } %closure3

entry4:                                           ; No predecessors!
  store ptr %0, ptr %self5, align 8
  %self6 = load ptr, ptr %self5, align 8
  %upval8 = getelementptr inbounds nuw { ptr, ptr }, ptr %closure7, i32 0, i32 0
  store ptr %self6, ptr %upval8, align 8
  %upval9 = getelementptr inbounds nuw { ptr, ptr }, ptr %closure7, i32 0, i32 1
  store ptr @"12770340728795463017_next_inner_i64ptr", ptr %upval9, align 8
  %closure10 = load { ptr, ptr }, ptr %closure7, align 8
  ret { ptr, ptr } %closure10
}

define i64 @"12770340728795463017_next_inner_i64ptr"(ptr %0) {
entry:
  %calltmp32 = alloca i64, align 8
  %calltmp27 = alloca { ptr, ptr }, align 8
  %calltmp18 = alloca i1, align 1
  %calltmp11 = alloca i64, align 8
  %calltmp7 = alloca { ptr, ptr }, align 8
  %i = alloca i64, align 8
  %pred = alloca { i64, ptr }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %rval = load ptr, ptr %self, align 8
  %field = getelementptr inbounds nuw { { ptr, { { ptr } } }, { i64, ptr } }, ptr %rval, i32 0, i32 1
  %rval1 = load { i64, ptr }, ptr %field, align 8
  store { i64, ptr } %rval1, ptr %pred, align 8
  %rval2 = load ptr, ptr %self, align 8
  %field3 = getelementptr inbounds nuw { { ptr, { { ptr } } }, { i64, ptr } }, ptr %rval2, i32 0, i32 0
  %rval4 = load { ptr }, ptr @"9688406665803032424_next", align 8
  %rval5 = load ptr, ptr %self, align 8
  %field6 = getelementptr inbounds nuw { { ptr, { { ptr } } }, { i64, ptr } }, ptr %rval5, i32 0, i32 0
  %fnptr = extractvalue { ptr } %rval4, 0
  %calltmp = call { ptr, ptr } %fnptr(ptr %field6)
  store { ptr, ptr } %calltmp, ptr %calltmp7, align 8
  %rval8 = load { ptr, ptr }, ptr %calltmp7, align 8
  %fnptr9 = extractvalue { ptr, ptr } %rval8, 1
  %upval = extractvalue { ptr, ptr } %rval8, 0
  %calltmp10 = call i64 %fnptr9(ptr %upval)
  store i64 %calltmp10, ptr %calltmp11, align 4
  %rval12 = load i64, ptr %calltmp11, align 4
  store i64 %rval12, ptr %i, align 4
  br label %loop_31

loop_31:                                          ; preds = %body_31, %entry
  %rval13 = load { i64, ptr }, ptr %pred, align 8
  %rval14 = load i64, ptr %i, align 4
  %fnptr15 = extractvalue { i64, ptr } %rval13, 1
  %upval16 = extractvalue { i64, ptr } %rval13, 0
  %calltmp17 = call i1 %fnptr15(i64 %upval16, i64 %rval14)
  store i1 %calltmp17, ptr %calltmp18, align 1
  %rval19 = load i1, ptr %calltmp18, align 1
  %nottmp = xor i1 %rval19, true
  br i1 %nottmp, label %body_31, label %merge_31

body_31:                                          ; preds = %loop_31
  %rval20 = load ptr, ptr %self, align 8
  %field21 = getelementptr inbounds nuw { { ptr, { { ptr } } }, { i64, ptr } }, ptr %rval20, i32 0, i32 0
  %rval22 = load { ptr }, ptr @"9688406665803032424_next", align 8
  %rval23 = load ptr, ptr %self, align 8
  %field24 = getelementptr inbounds nuw { { ptr, { { ptr } } }, { i64, ptr } }, ptr %rval23, i32 0, i32 0
  %fnptr25 = extractvalue { ptr } %rval22, 0
  %calltmp26 = call { ptr, ptr } %fnptr25(ptr %field24)
  store { ptr, ptr } %calltmp26, ptr %calltmp27, align 8
  %rval28 = load { ptr, ptr }, ptr %calltmp27, align 8
  %fnptr29 = extractvalue { ptr, ptr } %rval28, 1
  %upval30 = extractvalue { ptr, ptr } %rval28, 0
  %calltmp31 = call i64 %fnptr29(ptr %upval30)
  store i64 %calltmp31, ptr %calltmp32, align 4
  %rval33 = load i64, ptr %calltmp32, align 4
  store i64 %rval33, ptr %i, align 4
  br label %loop_31

merge_31:                                         ; preds = %loop_31
  %rval34 = load i64, ptr %i, align 4
  ret i64 %rval34
}

define { ptr, { { ptr } } } @"filter_impl_generator_ptr->ptrptr"(ptr %0) {
entry:
  %struct_init = alloca { ptr, { { ptr } } }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %rval = load { ptr }, ptr @"12770340728795463017_next", align 8
  store { ptr } %rval, ptr @filter_generator_vtable, align 8
  %field = getelementptr inbounds nuw { ptr, { { ptr } } }, ptr %struct_init, i32 0, i32 0
  %rval1 = load ptr, ptr %self, align 8
  store ptr %rval1, ptr %field, align 8
  %field2 = getelementptr inbounds nuw { ptr, { { ptr } } }, ptr %struct_init, i32 0, i32 1
  %rval3 = load { { ptr } }, ptr @filter_generator_vtable, align 8
  store { { ptr } } %rval3, ptr %field2, align 8
  %struct_init4 = load { ptr, { { ptr } } }, ptr %struct_init, align 8
  ret { ptr, { { ptr } } } %struct_init4
}

define { ptr, ptr } @"12868915959732643263_next_ptr->ptrptr"(ptr %0) {
entry:
  %closure7 = alloca { ptr, ptr }, align 8
  %self5 = alloca ptr, align 8
  %closure = alloca { ptr, ptr }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %self1 = load ptr, ptr %self, align 8
  %upval = getelementptr inbounds nuw { ptr, ptr }, ptr %closure, i32 0, i32 0
  store ptr %self1, ptr %upval, align 8
  %upval2 = getelementptr inbounds nuw { ptr, ptr }, ptr %closure, i32 0, i32 1
  store ptr @"12868915959732643263_next_inner_i64ptr", ptr %upval2, align 8
  %closure3 = load { ptr, ptr }, ptr %closure, align 8
  ret { ptr, ptr } %closure3

entry4:                                           ; No predecessors!
  store ptr %0, ptr %self5, align 8
  %self6 = load ptr, ptr %self5, align 8
  %upval8 = getelementptr inbounds nuw { ptr, ptr }, ptr %closure7, i32 0, i32 0
  store ptr %self6, ptr %upval8, align 8
  %upval9 = getelementptr inbounds nuw { ptr, ptr }, ptr %closure7, i32 0, i32 1
  store ptr @"12868915959732643263_next_inner_i64ptr", ptr %upval9, align 8
  %closure10 = load { ptr, ptr }, ptr %closure7, align 8
  ret { ptr, ptr } %closure10
}

define i64 @"12868915959732643263_next_inner_i64ptr"(ptr %0) {
entry:
  %calltmp27 = alloca { ptr, { { ptr } } }, align 8
  %struct_init = alloca { { ptr, { { ptr } } }, { i64, ptr } }, align 8
  %f = alloca ptr, align 8
  %closure = alloca { i64, ptr }, align 8
  %pred = alloca { i64, ptr }, align 8
  %calltmp7 = alloca i64, align 8
  %calltmp3 = alloca { ptr, ptr }, align 8
  %i = alloca i64, align 8
  %gen = alloca { ptr, { { ptr } } }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %rval = load ptr, ptr %self, align 8
  %field = getelementptr inbounds nuw { { ptr, { { ptr } } } }, ptr %rval, i32 0, i32 0
  %rval1 = load { ptr, { { ptr } } }, ptr %field, align 8
  store { ptr, { { ptr } } } %rval1, ptr %gen, align 8
  %rval2 = load { ptr }, ptr @"9688406665803032424_next", align 8
  %fnptr = extractvalue { ptr } %rval2, 0
  %calltmp = call { ptr, ptr } %fnptr(ptr %gen)
  store { ptr, ptr } %calltmp, ptr %calltmp3, align 8
  %rval4 = load { ptr, ptr }, ptr %calltmp3, align 8
  %fnptr5 = extractvalue { ptr, ptr } %rval4, 1
  %upval = extractvalue { ptr, ptr } %rval4, 0
  %calltmp6 = call i64 %fnptr5(ptr %upval)
  store i64 %calltmp6, ptr %calltmp7, align 4
  %rval8 = load i64, ptr %calltmp7, align 4
  store i64 %rval8, ptr %i, align 4
  %i9 = load i64, ptr %i, align 4
  %upval10 = getelementptr inbounds nuw { i64, ptr }, ptr %closure, i32 0, i32 0
  store i64 %i9, ptr %upval10, align 4
  %upval11 = getelementptr inbounds nuw { i64, ptr }, ptr %closure, i32 0, i32 1
  store ptr @"anon0_i1i64->i64", ptr %upval11, align 8
  %closure12 = load { i64, ptr }, ptr %closure, align 8
  store { i64, ptr } %closure12, ptr %pred, align 8
  %rval13 = load ptr, ptr @malloc, align 8
  %calltmp14 = call ptr @malloc(i64 ptrtoint (ptr getelementptr ({ { ptr, { { ptr } } }, { i64, ptr } }, ptr null, i32 1) to i64))
  store ptr %calltmp14, ptr %f, align 8
  %field15 = getelementptr inbounds nuw { { ptr, { { ptr } } }, { i64, ptr } }, ptr %struct_init, i32 0, i32 0
  %rval16 = load ptr, ptr %self, align 8
  %field17 = getelementptr inbounds nuw { { ptr, { { ptr } } } }, ptr %rval16, i32 0, i32 0
  %rval18 = load { ptr, { { ptr } } }, ptr %field17, align 8
  store { ptr, { { ptr } } } %rval18, ptr %field15, align 8
  %field19 = getelementptr inbounds nuw { { ptr, { { ptr } } }, { i64, ptr } }, ptr %struct_init, i32 0, i32 1
  %rval20 = load { i64, ptr }, ptr %pred, align 8
  store { i64, ptr } %rval20, ptr %field19, align 8
  %struct_init21 = load { { ptr, { { ptr } } }, { i64, ptr } }, ptr %struct_init, align 8
  %rval22 = load ptr, ptr %f, align 8
  store { { ptr, { { ptr } } }, { i64, ptr } } %struct_init21, ptr %rval22, align 8
  %rval23 = load { ptr }, ptr @filter_impl_generator, align 8
  %rval24 = load ptr, ptr %f, align 8
  %fnptr25 = extractvalue { ptr } %rval23, 0
  %calltmp26 = call { ptr, { { ptr } } } %fnptr25(ptr %rval24)
  store { ptr, { { ptr } } } %calltmp26, ptr %calltmp27, align 8
  %rval28 = load { ptr, { { ptr } } }, ptr %calltmp27, align 8
  %rval29 = load ptr, ptr %self, align 8
  %field30 = getelementptr inbounds nuw { { ptr, { { ptr } } } }, ptr %rval29, i32 0, i32 0
  store { ptr, { { ptr } } } %rval28, ptr %field30, align 8
  %rval31 = load i64, ptr %i, align 4
  ret i64 %rval31
}

define { ptr, { { ptr } } } @"seive_impl_generator_ptr->ptrptr"(ptr %0) {
entry:
  %struct_init = alloca { ptr, { { ptr } } }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %rval = load { ptr }, ptr @"12868915959732643263_next", align 8
  store { ptr } %rval, ptr @seive_generator_vtable, align 8
  %field = getelementptr inbounds nuw { ptr, { { ptr } } }, ptr %struct_init, i32 0, i32 0
  %rval1 = load ptr, ptr %self, align 8
  store ptr %rval1, ptr %field, align 8
  %field2 = getelementptr inbounds nuw { ptr, { { ptr } } }, ptr %struct_init, i32 0, i32 1
  %rval3 = load { { ptr } }, ptr @seive_generator_vtable, align 8
  store { { ptr } } %rval3, ptr %field2, align 8
  %struct_init4 = load { ptr, { { ptr } } }, ptr %struct_init, align 8
  ret { ptr, { { ptr } } } %struct_init4
}

define i1 @"anon0_i1i64->i64"(i64 %0, i64 %1) {
entry:
  %x = alloca i64, align 8
  %i = alloca i64, align 8
  store i64 %0, ptr %i, align 4
  store i64 %1, ptr %x, align 4
  %rval = load i64, ptr %x, align 4
  %rval1 = load i64, ptr %i, align 4
  %divtmp = sdiv i64 %rval, %rval1
  %inttofp = sitofp i64 %divtmp to double
  %rval2 = load i64, ptr %x, align 4
  %inttofp3 = sitofp i64 %rval2 to double
  %rval4 = load i64, ptr %i, align 4
  %inttofp5 = sitofp i64 %rval4 to double
  %divtmp6 = fdiv double %inttofp3, %inttofp5
  %neqtmp = fcmp one double %inttofp, %divtmp6
  ret i1 %neqtmp
}

define i64 @main_i64() {
entry:
  %calltmp15 = alloca i64, align 8
  %calltmp11 = alloca { ptr, ptr }, align 8
  %p = alloca i64, align 8
  %i = alloca i64, align 8
  %prod = alloca i64, align 8
  %calltmp4 = alloca { ptr, { { ptr } } }, align 8
  %struct_init2 = alloca { { ptr, { { ptr } } } }, align 8
  %gen = alloca { { ptr, { { ptr } } } }, align 8
  %struct_init = alloca { i64 }, align 8
  %nats = alloca { i64 }, align 8
  %field = getelementptr inbounds nuw { i64 }, ptr %struct_init, i32 0, i32 0
  store i64 2, ptr %field, align 4
  %struct_init1 = load { i64 }, ptr %struct_init, align 4
  store { i64 } %struct_init1, ptr %nats, align 4
  %field3 = getelementptr inbounds nuw { { ptr, { { ptr } } } }, ptr %struct_init2, i32 0, i32 0
  %rval = load { ptr }, ptr @nat_gen_impl_generator, align 8
  %fnptr = extractvalue { ptr } %rval, 0
  %calltmp = call { ptr, { { ptr } } } %fnptr(ptr %nats)
  store { ptr, { { ptr } } } %calltmp, ptr %calltmp4, align 8
  %rval5 = load { ptr, { { ptr } } }, ptr %calltmp4, align 8
  store { ptr, { { ptr } } } %rval5, ptr %field3, align 8
  %struct_init6 = load { { ptr, { { ptr } } } }, ptr %struct_init2, align 8
  store { { ptr, { { ptr } } } } %struct_init6, ptr %gen, align 8
  store i64 1, ptr %prod, align 4
  store i64 0, ptr %i, align 4
  br label %loop_59

loop_59:                                          ; preds = %body_59, %entry
  %rval7 = load i64, ptr %i, align 4
  %lttmp = icmp slt i64 %rval7, 100
  br i1 %lttmp, label %body_59, label %merge_59

body_59:                                          ; preds = %loop_59
  %rval8 = load { ptr }, ptr @"12868915959732643263_next", align 8
  %fnptr9 = extractvalue { ptr } %rval8, 0
  %calltmp10 = call { ptr, ptr } %fnptr9(ptr %gen)
  store { ptr, ptr } %calltmp10, ptr %calltmp11, align 8
  %rval12 = load { ptr, ptr }, ptr %calltmp11, align 8
  %fnptr13 = extractvalue { ptr, ptr } %rval12, 1
  %upval = extractvalue { ptr, ptr } %rval12, 0
  %calltmp14 = call i64 %fnptr13(ptr %upval)
  store i64 %calltmp14, ptr %calltmp15, align 4
  %rval16 = load i64, ptr %calltmp15, align 4
  store i64 %rval16, ptr %p, align 4
  %rval17 = load i64, ptr %prod, align 4
  %rval18 = load i64, ptr %p, align 4
  %multmp = mul i64 %rval17, %rval18
  store i64 %multmp, ptr %prod, align 4
  %rval19 = load i64, ptr %i, align 4
  %addtmp = add i64 %rval19, 1
  store i64 %addtmp, ptr %i, align 4
  br label %loop_59

merge_59:                                         ; preds = %loop_59
  %rval20 = load i64, ptr %prod, align 4
  ret i64 %rval20
}
