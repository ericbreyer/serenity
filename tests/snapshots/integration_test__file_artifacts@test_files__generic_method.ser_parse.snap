---
source: tests/integration_test.rs
expression: result
---
[line    6] Function Declaration: test_add<T>
[line    6] ╰─── Function Expression:
[line    6]      ├─── Name: test_add
[line    6]      ├─── Return Type: fn[*struct test { a: <T>, b: <T>, }](<T>) -> <T>
[line    6]      ├─── Params:
[line    6]      │    ╰─── t: *struct test { a: <T>, b: <T>, }
[line    6]      ╰─── Body: 
[line    6]           ╰─── Return:
[line    0]                ╰─── Function: test_add_inner
[line    0]                     ╰─── Function Expression:
[line    0]                          ├─── Name: test_add_inner
[line    0]                          ├─── Return Type: <T>
[line    0]                          ├─── Captures:
[line    0]                          │    ╰─── t
[line    0]                          ├─── Params:
[line    0]                          │    ╰─── c: <T>
[line    0]                          ╰─── Body: 
[line    6]                               ╰─── Return:
[line    7]                                    ╰─── Binary: Plus
[line    7]                                         ├─── Binary: Plus
[line    7]                                         │    ├─── Get: "a"
[line    7]                                         │    │    ╰─── Deref: 
[line    7]                                         │    │         ╰─── Variable: t
[line    7]                                         │    ╰─── Get: "b"
[line    7]                                         │         ╰─── Deref: 
[line    7]                                         │              ╰─── Variable: t
[line    7]                                         ╰─── Variable: c
[line   10] Function Declaration: main
[line   10] ╰─── Function Expression:
[line   10]      ├─── Name: main
[line   10]      ├─── Return Type: int
[line   10]      ╰─── Body: 
[line   11]           ├─── Var Declaration: d
[line   12]           ├─── Expression: 
[line   12]           │    ╰─── Assign:
[line   12]           │         ├─── Get: "a"
[line   12]           │         │    ╰─── Variable: d
[line   12]           │         ╰─── Literal: 1
[line   13]           ├─── Expression: 
[line   13]           │    ╰─── Assign:
[line   13]           │         ├─── Get: "b"
[line   13]           │         │    ╰─── Variable: d
[line   13]           │         ╰─── Literal: 2
[line   15]           ├─── Var Declaration: f
[line   16]           ├─── Expression: 
[line   16]           │    ╰─── Assign:
[line   16]           │         ├─── Get: "a"
[line   16]           │         │    ╰─── Variable: f
[line   16]           │         ╰─── Literal: 1
[line   17]           ├─── Expression: 
[line   17]           │    ╰─── Assign:
[line   17]           │         ├─── Get: "b"
[line   17]           │         │    ╰─── Variable: f
[line   17]           │         ╰─── Literal: 2
[line   17]           ╰─── Return:
[line   19]                ╰─── Binary: Plus
[line   19]                     ├─── Call:
[line   19]                     │    ├─── Get: "add"
[line   19]                     │    │    ╰─── Variable: d
[line   19]                     │    ╰─── Literal: 3
[line   19]                     ╰─── Cast: int
[line   19]                          ╰─── Call:
[line   19]                               ├─── Get: "add"
[line   19]                               │    ╰─── Variable: f
[line   19]                               ╰─── Literal: 3
