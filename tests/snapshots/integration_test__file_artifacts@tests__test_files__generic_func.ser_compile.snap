---
source: tests/integration_test.rs
expression: result
---
; ModuleID = 'main'
source_filename = "main"

@test_generic_0 = global { ptr } { ptr @test_generic_0_i64i64 }
@test_generic_1 = global { ptr } { ptr @test_generic_1_doubledouble }
@test_generic_2 = global { ptr } { ptr @test_generic_2_i64i64 }
@main = global { ptr } { ptr @main_i64 }

declare i8 @printf(ptr, ...)

declare ptr @malloc(i64)

declare i8 @free(ptr)

declare i8 @usleep(i64)

define i64 @test_generic_0_i64i64(i64 %0) {
entry:
  %ident = alloca i64, align 8
  store i64 %0, ptr %ident, align 4
  %rval = load i64, ptr %ident, align 4
  %rval1 = load i64, ptr %ident, align 4
  %addtmp = add i64 %rval, %rval1
  ret i64 %addtmp
}

define double @test_generic_1_doubledouble(double %0) {
entry:
  %ident = alloca double, align 8
  store double %0, ptr %ident, align 8
  %rval = load double, ptr %ident, align 8
  %rval1 = load double, ptr %ident, align 8
  %addtmp = fadd double %rval, %rval1
  ret double %addtmp
}

define i64 @test_generic_2_i64i64(i64 %0) {
entry:
  %ident = alloca i64, align 8
  store i64 %0, ptr %ident, align 4
  %rval = load i64, ptr %ident, align 4
  %rval1 = load i64, ptr %ident, align 4
  %addtmp = add i64 %rval, %rval1
  ret i64 %addtmp
}

define i64 @main_i64() {
entry:
  %calltmp17 = alloca i64, align 8
  %z12 = alloca i64, align 8
  %z = alloca i64, align 8
  %calltmp10 = alloca double, align 8
  %y5 = alloca double, align 8
  %y = alloca double, align 8
  %calltmp3 = alloca i64, align 8
  %x1 = alloca i64, align 8
  %x = alloca i64, align 8
  store i64 90, ptr %x, align 4
  %rval = load { ptr }, ptr @test_generic_0, align 8
  %rval2 = load i64, ptr %x, align 4
  %fnptr = extractvalue { ptr } %rval, 0
  %calltmp = call i64 %fnptr(i64 %rval2)
  store i64 %calltmp, ptr %calltmp3, align 4
  %rval4 = load i64, ptr %calltmp3, align 4
  store i64 %rval4, ptr %x1, align 4
  store double 9.000000e+01, ptr %y, align 8
  %rval6 = load { ptr }, ptr @test_generic_1, align 8
  %rval7 = load double, ptr %y, align 8
  %fnptr8 = extractvalue { ptr } %rval6, 0
  %calltmp9 = call double %fnptr8(double %rval7)
  store double %calltmp9, ptr %calltmp10, align 8
  %rval11 = load double, ptr %calltmp10, align 8
  store double %rval11, ptr %y5, align 8
  store i64 90, ptr %z, align 4
  %rval13 = load { ptr }, ptr @test_generic_2, align 8
  %rval14 = load i64, ptr %z, align 4
  %fnptr15 = extractvalue { ptr } %rval13, 0
  %calltmp16 = call i64 %fnptr15(i64 %rval14)
  store i64 %calltmp16, ptr %calltmp17, align 4
  %rval18 = load i64, ptr %calltmp17, align 4
  store i64 %rval18, ptr %z12, align 4
  %rval19 = load i64, ptr %x1, align 4
  %rval20 = load double, ptr %y5, align 8
  %fptoint = fptosi double %rval20 to i64
  %addtmp = add i64 %rval19, %fptoint
  %rval21 = load i64, ptr %z12, align 4
  %addtmp22 = add i64 %addtmp, %rval21
  ret i64 %addtmp22
}
