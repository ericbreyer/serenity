---
source: tests/integration_test.rs
expression: result
---
[line    6] Function Declaration: main
[line    6] ╰─── Function Expression:
[line    6]      ├─── Name: main
[line    6]      ├─── Return Type: int
[line    6]      ╰─── Body: 
[line    7]           ├─── Var Declaration: head
[line    7]           │    ╰───  Initializer
[line    7]           │         ╰─── StructInitializer: struct linkedList {data: $2, next: *struct linkedList, }
[line    7]           │              ├───  data: 
[line    7]           │              │    ╰─── Literal: 10
[line    7]           │              ╰───  next: 
[line    7]           │                   ╰─── Literal: 0
[line    8]           ├─── Var Declaration: current
[line    8]           │    ╰───  Initializer
[line    8]           │         ╰─── Ref: 
[line    8]           │              ╰─── Variable: head
[line   10]           ├─── For: 
[line   10]           │    ├─── Var Declaration: i
[line   10]           │    │    ╰───  Initializer
[line   10]           │    │         ╰─── Literal: 0
[line   10]           │    ├─── Binary: Less
[line   10]           │    │    ├─── Variable: i
[line   10]           │    │    ╰─── Literal: 10
[line   10]           │    ├─── Assign:
[line   10]           │    │    ├─── Variable: i
[line   10]           │    │    ╰─── Binary: Plus
[line   10]           │    │         ├─── Variable: i
[line   10]           │    │         ╰─── Literal: 1
[line   10]           │    ╰─── Block: 
[line   11]           │         ├─── Expression: 
[line   11]           │         │    ╰─── Assign:
[line   11]           │         │         ├─── Get: "next"
[line   11]           │         │         │    ╰─── Deref: 
[line   11]           │         │         │         ╰─── Variable: current
[line   11]           │         │         ╰─── Call:
[line   11]           │         │              ├─── Variable: malloc
[line   11]           │         │              ╰─── Sizeof: struct linkedList { data: int, next: *struct linkedList, }
[line   12]           │         ├─── Expression: 
[line   12]           │         │    ╰─── Assign:
[line   12]           │         │         ├─── Get: "data"
[line   12]           │         │         │    ╰─── Deref: 
[line   12]           │         │         │         ╰─── Get: "next"
[line   12]           │         │         │              ╰─── Deref: 
[line   12]           │         │         │                   ╰─── Variable: current
[line   12]           │         │         ╰─── Binary: Minus
[line   12]           │         │              ├─── Literal: 9
[line   12]           │         │              ╰─── Variable: i
[line   13]           │         ╰─── Expression: 
[line   13]           │              ╰─── Assign:
[line   13]           │                   ├─── Variable: current
[line   13]           │                   ╰─── Get: "next"
[line   13]           │                        ╰─── Deref: 
[line   13]           │                             ╰─── Variable: current
[line   16]           ├─── Var Declaration: sum
[line   16]           │    ╰───  Initializer
[line   16]           │         ╰─── Literal: 0
[line   17]           ├─── For: 
[line   17]           │    ├─── Var Declaration: current
[line   17]           │    │    ╰───  Initializer
[line   17]           │    │         ╰─── Ref: 
[line   17]           │    │              ╰─── Variable: head
[line   17]           │    ├─── Binary: BangEqual
[line   17]           │    │    ├─── Get: "data"
[line   17]           │    │    │    ╰─── Deref: 
[line   17]           │    │    │         ╰─── Variable: current
[line   17]           │    │    ╰─── Literal: 0
[line   17]           │    ├─── Assign:
[line   17]           │    │    ├─── Variable: current
[line   17]           │    │    ╰─── Get: "next"
[line   17]           │    │         ╰─── Deref: 
[line   17]           │    │              ╰─── Variable: current
[line   17]           │    ╰─── Block: 
[line   18]           │         ╰─── Expression: 
[line   18]           │              ╰─── Assign:
[line   18]           │                   ├─── Variable: sum
[line   18]           │                   ╰─── Binary: Plus
[line   18]           │                        ├─── Variable: sum
[line   18]           │                        ╰─── Get: "data"
[line   18]           │                             ╰─── Deref: 
[line   18]           │                                  ╰─── Variable: current
[line   19]           ╰─── Return:
[line   20]                ╰─── Variable: sum
