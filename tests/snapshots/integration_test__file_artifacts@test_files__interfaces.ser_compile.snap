---
source: tests/integration_test.rs
expression: result
---
; ModuleID = 'main'
source_filename = "main"

@"6750401501040231661_add" = global { ptr } { ptr @"6750401501040231661_add_fn" }
@"17291069585011617692_add" = global { ptr } { ptr @"17291069585011617692_add_fn" }
@c_adder_vtable = global { { ptr } } zeroinitializer
@c_impl_adder = global { ptr } { ptr @c_impl_adder_fn }
@"1865986952864376157_add" = global { ptr } { ptr @"1865986952864376157_add_fn" }
@d_adder_vtable = global { { ptr } } zeroinitializer
@d_impl_adder = global { ptr } { ptr @d_impl_adder_fn }
@stuff = global { ptr } { ptr @stuff_fn }
@main = global { ptr } { ptr @main_fn }

declare i8 @printf(ptr, ...)

declare ptr @malloc(i64)

declare i8 @free(ptr)

define { ptr, ptr } @"6750401501040231661_add_fn"(ptr %0) {
entry:
  %closure = alloca { ptr, ptr }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %self1 = load ptr, ptr %self, align 8
  %upval = getelementptr inbounds { ptr, ptr }, ptr %closure, i32 0, i32 0
  store ptr %self1, ptr %upval, align 8
  %upval2 = getelementptr inbounds { ptr, ptr }, ptr %closure, i32 0, i32 1
  store ptr @"6750401501040231661_add_inner_fn", ptr %upval2, align 8
  %closure3 = load { ptr, ptr }, ptr %closure, align 8
  ret { ptr, ptr } %closure3
}

define i64 @"6750401501040231661_add_inner_fn"(ptr %0, i64 %1) {
entry:
  %calltmp12 = alloca i64, align 8
  %calltmp7 = alloca { ptr, ptr }, align 8
  %a0 = alloca i64, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  store i64 %1, ptr %a0, align 4
  %rval = load ptr, ptr %self, align 8
  %field = getelementptr inbounds { ptr, ptr }, ptr %rval, i32 0, i32 1
  %rval1 = load ptr, ptr %field, align 8
  %field2 = getelementptr inbounds { { ptr } }, ptr %rval1, i32 0, i32 0
  %rval3 = load { ptr }, ptr %field2, align 8
  %rval4 = load ptr, ptr %self, align 8
  %field5 = getelementptr inbounds { ptr, ptr }, ptr %rval4, i32 0, i32 0
  %rval6 = load ptr, ptr %field5, align 8
  %fnptr = extractvalue { ptr } %rval3, 0
  %calltmp = call { ptr, ptr } %fnptr(ptr %rval6)
  store { ptr, ptr } %calltmp, ptr %calltmp7, align 8
  %rval8 = load { ptr, ptr }, ptr %calltmp7, align 8
  %rval9 = load i64, ptr %a0, align 4
  %fnptr10 = extractvalue { ptr, ptr } %rval8, 1
  %upval = extractvalue { ptr, ptr } %rval8, 0
  %calltmp11 = call i64 %fnptr10(ptr %upval, i64 %rval9)
  store i64 %calltmp11, ptr %calltmp12, align 4
  %rval13 = load i64, ptr %calltmp12, align 4
  ret i64 %rval13
}

define { ptr, ptr } @"17291069585011617692_add_fn"(ptr %0) {
entry:
  %closure7 = alloca { ptr, ptr }, align 8
  %self5 = alloca ptr, align 8
  %closure = alloca { ptr, ptr }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %self1 = load ptr, ptr %self, align 8
  %upval = getelementptr inbounds { ptr, ptr }, ptr %closure, i32 0, i32 0
  store ptr %self1, ptr %upval, align 8
  %upval2 = getelementptr inbounds { ptr, ptr }, ptr %closure, i32 0, i32 1
  store ptr @"17291069585011617692_add_inner_fn", ptr %upval2, align 8
  %closure3 = load { ptr, ptr }, ptr %closure, align 8
  ret { ptr, ptr } %closure3

entry4:                                           ; No predecessors!
  store ptr %0, ptr %self5, align 8
  %self6 = load ptr, ptr %self5, align 8
  %upval8 = getelementptr inbounds { ptr, ptr }, ptr %closure7, i32 0, i32 0
  store ptr %self6, ptr %upval8, align 8
  %upval9 = getelementptr inbounds { ptr, ptr }, ptr %closure7, i32 0, i32 1
  store ptr @"17291069585011617692_add_inner_fn", ptr %upval9, align 8
  %closure10 = load { ptr, ptr }, ptr %closure7, align 8
  ret { ptr, ptr } %closure10
}

define i64 @"17291069585011617692_add_inner_fn"(ptr %0, i64 %1) {
entry:
  %rself = alloca ptr, align 8
  %j = alloca i64, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  store i64 %1, ptr %j, align 4
  %rval = load ptr, ptr %self, align 8
  store ptr %rval, ptr %rself, align 8
  %rval1 = load ptr, ptr %rself, align 8
  %field = getelementptr inbounds { i64 }, ptr %rval1, i32 0, i32 0
  %rval2 = load i64, ptr %field, align 4
  %rval3 = load i64, ptr %j, align 4
  %addtmp = add i64 %rval2, %rval3
  %rval4 = load ptr, ptr %rself, align 8
  %field5 = getelementptr inbounds { i64 }, ptr %rval4, i32 0, i32 0
  store i64 %addtmp, ptr %field5, align 4
  ret i64 %addtmp
}

define { ptr, ptr } @c_impl_adder_fn(ptr %0) {
entry:
  %struct_init = alloca { ptr, ptr }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %rval = load { ptr }, ptr @"17291069585011617692_add", align 8
  store { ptr } %rval, ptr @c_adder_vtable, align 8
  %field = getelementptr inbounds { ptr, ptr }, ptr %struct_init, i32 0, i32 0
  %rval1 = load ptr, ptr %self, align 8
  store ptr %rval1, ptr %field, align 8
  %field2 = getelementptr inbounds { ptr, ptr }, ptr %struct_init, i32 0, i32 1
  store ptr @c_adder_vtable, ptr %field2, align 8
  %struct_init3 = load { ptr, ptr }, ptr %struct_init, align 8
  ret { ptr, ptr } %struct_init3
}

define { ptr, ptr } @"1865986952864376157_add_fn"(ptr %0) {
entry:
  %closure7 = alloca { ptr, ptr }, align 8
  %self5 = alloca ptr, align 8
  %closure = alloca { ptr, ptr }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %self1 = load ptr, ptr %self, align 8
  %upval = getelementptr inbounds { ptr, ptr }, ptr %closure, i32 0, i32 0
  store ptr %self1, ptr %upval, align 8
  %upval2 = getelementptr inbounds { ptr, ptr }, ptr %closure, i32 0, i32 1
  store ptr @"1865986952864376157_add_inner_fn", ptr %upval2, align 8
  %closure3 = load { ptr, ptr }, ptr %closure, align 8
  ret { ptr, ptr } %closure3

entry4:                                           ; No predecessors!
  store ptr %0, ptr %self5, align 8
  %self6 = load ptr, ptr %self5, align 8
  %upval8 = getelementptr inbounds { ptr, ptr }, ptr %closure7, i32 0, i32 0
  store ptr %self6, ptr %upval8, align 8
  %upval9 = getelementptr inbounds { ptr, ptr }, ptr %closure7, i32 0, i32 1
  store ptr @"1865986952864376157_add_inner_fn", ptr %upval9, align 8
  %closure10 = load { ptr, ptr }, ptr %closure7, align 8
  ret { ptr, ptr } %closure10
}

define i64 @"1865986952864376157_add_inner_fn"(ptr %0, i64 %1) {
entry:
  %rself = alloca ptr, align 8
  %j = alloca i64, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  store i64 %1, ptr %j, align 4
  %rval = load ptr, ptr %self, align 8
  store ptr %rval, ptr %rself, align 8
  %rval1 = load ptr, ptr %rself, align 8
  %field = getelementptr inbounds { i64 }, ptr %rval1, i32 0, i32 0
  %rval2 = load i64, ptr %field, align 4
  %rval3 = load i64, ptr %j, align 4
  %subtmp = sub i64 %rval2, %rval3
  %rval4 = load ptr, ptr %rself, align 8
  %field5 = getelementptr inbounds { i64 }, ptr %rval4, i32 0, i32 0
  store i64 %subtmp, ptr %field5, align 4
  ret i64 %subtmp
}

define { ptr, ptr } @d_impl_adder_fn(ptr %0) {
entry:
  %struct_init = alloca { ptr, ptr }, align 8
  %self = alloca ptr, align 8
  store ptr %0, ptr %self, align 8
  %rval = load { ptr }, ptr @"1865986952864376157_add", align 8
  store { ptr } %rval, ptr @d_adder_vtable, align 8
  %field = getelementptr inbounds { ptr, ptr }, ptr %struct_init, i32 0, i32 0
  %rval1 = load ptr, ptr %self, align 8
  store ptr %rval1, ptr %field, align 8
  %field2 = getelementptr inbounds { ptr, ptr }, ptr %struct_init, i32 0, i32 1
  store ptr @d_adder_vtable, ptr %field2, align 8
  %struct_init3 = load { ptr, ptr }, ptr %struct_init, align 8
  ret { ptr, ptr } %struct_init3
}

define i64 @stuff_fn({ ptr, ptr } %0) {
entry:
  %calltmp5 = alloca i64, align 8
  %calltmp1 = alloca { ptr, ptr }, align 8
  %adder = alloca { ptr, ptr }, align 8
  store { ptr, ptr } %0, ptr %adder, align 8
  %rval = load { ptr }, ptr @"6750401501040231661_add", align 8
  %fnptr = extractvalue { ptr } %rval, 0
  %calltmp = call { ptr, ptr } %fnptr(ptr %adder)
  store { ptr, ptr } %calltmp, ptr %calltmp1, align 8
  %rval2 = load { ptr, ptr }, ptr %calltmp1, align 8
  %fnptr3 = extractvalue { ptr, ptr } %rval2, 1
  %upval = extractvalue { ptr, ptr } %rval2, 0
  %calltmp4 = call i64 %fnptr3(ptr %upval, i64 2)
  store i64 %calltmp4, ptr %calltmp5, align 4
  %rval6 = load i64, ptr %calltmp5, align 4
  ret i64 %rval6
}

define i64 @main_fn() {
entry:
  %calltmp56 = alloca i64, align 8
  %calltmp51 = alloca i64, align 8
  %calltmp46 = alloca { ptr, ptr }, align 8
  %calltmp42 = alloca i64, align 8
  %calltmp37 = alloca { ptr, ptr }, align 8
  %calltmp33 = alloca i64, align 8
  %calltmp28 = alloca i64, align 8
  %calltmp23 = alloca { ptr, ptr }, align 8
  %calltmp19 = alloca i64, align 8
  %calltmp15 = alloca { ptr, ptr }, align 8
  %d_impl = alloca { ptr, ptr }, align 8
  %calltmp10 = alloca { ptr, ptr }, align 8
  %d_conc = alloca { i64 }, align 8
  %struct_init4 = alloca { i64 }, align 8
  %c_impl = alloca { ptr, ptr }, align 8
  %calltmp2 = alloca { ptr, ptr }, align 8
  %c_conc = alloca { i64 }, align 8
  %struct_init = alloca { i64 }, align 8
  %field = getelementptr inbounds { i64 }, ptr %struct_init, i32 0, i32 0
  store i64 0, ptr %field, align 4
  %struct_init1 = load { i64 }, ptr %struct_init, align 4
  store { i64 } %struct_init1, ptr %c_conc, align 4
  %rval = load { ptr }, ptr @c_impl_adder, align 8
  %fnptr = extractvalue { ptr } %rval, 0
  %calltmp = call { ptr, ptr } %fnptr(ptr %c_conc)
  store { ptr, ptr } %calltmp, ptr %calltmp2, align 8
  %rval3 = load { ptr, ptr }, ptr %calltmp2, align 8
  store { ptr, ptr } %rval3, ptr %c_impl, align 8
  %field5 = getelementptr inbounds { i64 }, ptr %struct_init4, i32 0, i32 0
  store i64 0, ptr %field5, align 4
  %struct_init6 = load { i64 }, ptr %struct_init4, align 4
  store { i64 } %struct_init6, ptr %d_conc, align 4
  %rval7 = load { ptr }, ptr @d_impl_adder, align 8
  %fnptr8 = extractvalue { ptr } %rval7, 0
  %calltmp9 = call { ptr, ptr } %fnptr8(ptr %d_conc)
  store { ptr, ptr } %calltmp9, ptr %calltmp10, align 8
  %rval11 = load { ptr, ptr }, ptr %calltmp10, align 8
  store { ptr, ptr } %rval11, ptr %d_impl, align 8
  %rval12 = load { ptr }, ptr @"6750401501040231661_add", align 8
  %fnptr13 = extractvalue { ptr } %rval12, 0
  %calltmp14 = call { ptr, ptr } %fnptr13(ptr %c_impl)
  store { ptr, ptr } %calltmp14, ptr %calltmp15, align 8
  %rval16 = load { ptr, ptr }, ptr %calltmp15, align 8
  %fnptr17 = extractvalue { ptr, ptr } %rval16, 1
  %upval = extractvalue { ptr, ptr } %rval16, 0
  %calltmp18 = call i64 %fnptr17(ptr %upval, i64 2)
  store i64 %calltmp18, ptr %calltmp19, align 4
  %rval20 = load { ptr }, ptr @"17291069585011617692_add", align 8
  %fnptr21 = extractvalue { ptr } %rval20, 0
  %calltmp22 = call { ptr, ptr } %fnptr21(ptr %c_conc)
  store { ptr, ptr } %calltmp22, ptr %calltmp23, align 8
  %rval24 = load { ptr, ptr }, ptr %calltmp23, align 8
  %fnptr25 = extractvalue { ptr, ptr } %rval24, 1
  %upval26 = extractvalue { ptr, ptr } %rval24, 0
  %calltmp27 = call i64 %fnptr25(ptr %upval26, i64 2)
  store i64 %calltmp27, ptr %calltmp28, align 4
  %rval29 = load { ptr }, ptr @stuff, align 8
  %rval30 = load { ptr, ptr }, ptr %c_impl, align 8
  %fnptr31 = extractvalue { ptr } %rval29, 0
  %calltmp32 = call i64 %fnptr31({ ptr, ptr } %rval30)
  store i64 %calltmp32, ptr %calltmp33, align 4
  %rval34 = load { ptr }, ptr @"6750401501040231661_add", align 8
  %fnptr35 = extractvalue { ptr } %rval34, 0
  %calltmp36 = call { ptr, ptr } %fnptr35(ptr %d_impl)
  store { ptr, ptr } %calltmp36, ptr %calltmp37, align 8
  %rval38 = load { ptr, ptr }, ptr %calltmp37, align 8
  %fnptr39 = extractvalue { ptr, ptr } %rval38, 1
  %upval40 = extractvalue { ptr, ptr } %rval38, 0
  %calltmp41 = call i64 %fnptr39(ptr %upval40, i64 2)
  store i64 %calltmp41, ptr %calltmp42, align 4
  %rval43 = load { ptr }, ptr @"1865986952864376157_add", align 8
  %fnptr44 = extractvalue { ptr } %rval43, 0
  %calltmp45 = call { ptr, ptr } %fnptr44(ptr %d_conc)
  store { ptr, ptr } %calltmp45, ptr %calltmp46, align 8
  %rval47 = load { ptr, ptr }, ptr %calltmp46, align 8
  %fnptr48 = extractvalue { ptr, ptr } %rval47, 1
  %upval49 = extractvalue { ptr, ptr } %rval47, 0
  %calltmp50 = call i64 %fnptr48(ptr %upval49, i64 2)
  store i64 %calltmp50, ptr %calltmp51, align 4
  %rval52 = load { ptr }, ptr @stuff, align 8
  %rval53 = load { ptr, ptr }, ptr %d_impl, align 8
  %fnptr54 = extractvalue { ptr } %rval52, 0
  %calltmp55 = call i64 %fnptr54({ ptr, ptr } %rval53)
  store i64 %calltmp55, ptr %calltmp56, align 4
  %field57 = getelementptr inbounds { i64 }, ptr %c_conc, i32 0, i32 0
  %rval58 = load i64, ptr %field57, align 4
  %field59 = getelementptr inbounds { i64 }, ptr %d_conc, i32 0, i32 0
  %rval60 = load i64, ptr %field59, align 4
  %subtmp = sub i64 %rval58, %rval60
  ret i64 %subtmp
}
