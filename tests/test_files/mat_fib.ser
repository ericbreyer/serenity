type twoxtwomatrix struct {
    a : int,
    b : int,
    c : int,
    d : int,
};

fn matMult(ma: *struct twoxtwomatrix, mb: *struct twoxtwomatrix) -> struct twoxtwomatrix {
    return struct twoxtwomatrix{
        a: ma->a * mb->a + ma->b * mb->c,
        b: ma->a * mb->b + ma->b * mb->d,
        c: ma->c * mb->a + ma->d * mb->c,
        d: ma->c * mb->b + ma->d * mb->d,
    };
}

fn printmat(m: *struct twoxtwomatrix) {
    printf("%d %d\n%d %d\n", m->a, m->b, m->c, m->d);
}

fn fib_mat(n: int) -> struct twoxtwomatrix {
    let baseMat = struct twoxtwomatrix{a: 1, b: 1, c: 1, d: 0};
    let identity = struct twoxtwomatrix{a: 1, b: 0, c: 0, d: 1};
    if(n == 0) {
        return identity;
    }
    if (n <= 1) {
        return baseMat;
    }

    let half = fib_mat(n / 2);
    let extra = (n % 2 == 0) ? identity : baseMat;

    let halfSquared = matMult(&half, &half);
    return matMult(&extra, &halfSquared);
}

fn fib(n: int) -> int {
    return fib_mat(n).b;
}

fn main() -> int {
    let ret = 0;
    for (let i = 0; i < 30; i = i + 1) {
        let f = fib(i);
        ret = ret + f;
    }
    return ret;
}