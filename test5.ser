struct counter {
        count : int,
};

fun increment(c : struct counter *) {
        c->count = c->count + 1;
}

fun decrement(c : struct counter *) {
        c->count = c->count - 1;
}

var closures: (fun(int) -> int)[2];

var c: struct counter;
        

fun make_counter() {
        c.count = 0;
        closures[0] = lambda(x: int) -> int {
                c.count = c.count + x;
                return c.count;
        };
        closures[1] = lambda(x: int) -> int {
                c.count = c.count - x;
                return c.count;
        };
}

fun main() {
        var c: struct counter;
        c.count = 0;
        increment(&c);
        print c.count;
        increment(&c);
        print c.count;
        decrement(&c);
        print c.count;
        decrement(&c);
        print c.count;

        make_counter();
        print "here";

        let add = closures[0];
        let sub = closures[1];

        print add(1);
        print add(2);
        print add(3);
        print add(1);
        print sub(1);
        print sub(2);
        print sub(3);
        print sub(1);
}