[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m enter
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m enter
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m exit
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m enter
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m exit
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m enter
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m exit
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m enter
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m exit
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m enter
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m exit
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m enter
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m enter
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m exit
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m exit
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m enter
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m exit
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m enter
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m enter
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m exit
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m exit
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m enter
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m enter
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m enter
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m exit
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m exit
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m exit
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m enter
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m[1mparse_complex_type[0m[1m{[0m[3mstruct_name[0m[2m=[0mNone[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m exit
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m Parse of tprime_conspiricy.ser succeeded
[32m INFO[0m [1mparse[0m[1m{[0m[3mname[0m[2m=[0mtprime_conspiricy.ser[1m}[0m[2m:[0m [2mserenity::parser::serenity_parser[0m[2m:[0m exit
[32m INFO[0m [2mserenity::compiler[0m[2m:[0m Typechecking complete
[32m INFO[0m [2mserenity::compiler[0m[2m:[0m Compilation complete
[34mDEBUG[0m [2mserenity[0m[2m:[0m ; ModuleID = 'main'
source_filename = "main"

@log = global { ptr } { ptr @log_fn }
@pow = global { ptr } { ptr @pow_fn }
@seive = global { ptr } { ptr @seive_fn }
@PRIMES = global [1000000 x i64] zeroinitializer
@transitions = global [10 x [10 x i64]] zeroinitializer
@str = private unnamed_addr constant [3 x i8] c"| \00", align 1
@str.1 = private unnamed_addr constant [16 x i8] c"%d->%d: %4d  | \00", align 1
@str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@main = global { ptr } { ptr @main_fn }

declare i8 @printf(ptr, ...)

declare ptr @malloc(i64)

declare i8 @free(ptr)

define i64 @log_fn(i64 %0) {
entry:
  %x = alloca i64, align 8
  %result = alloca i64, align 8
  store i64 %0, ptr %x, align 4
  store i64 0, ptr %result, align 4
  br label %loop_5

loop_5:                                           ; preds = %body_5, %entry
  %rval = load i64, ptr %x, align 4
  %gttmp = icmp sgt i64 %rval, 0
  br i1 %gttmp, label %body_5, label %merge_5

body_5:                                           ; preds = %loop_5
  %rval1 = load i64, ptr %x, align 4
  %divtmp = sdiv i64 %rval1, 10
  store i64 %divtmp, ptr %x, align 4
  %rval2 = load i64, ptr %result, align 4
  %addtmp = add i64 %rval2, 1
  store i64 %addtmp, ptr %result, align 4
  br label %loop_5

merge_5:                                          ; preds = %loop_5
  %rval3 = load i64, ptr %result, align 4
  ret i64 %rval3
}

define i64 @pow_fn(i64 %0, i64 %1) {
entry:
  %base = alloca i64, align 8
  %exp = alloca i64, align 8
  store i64 %0, ptr %base, align 4
  %result = alloca i64, align 8
  store i64 %1, ptr %exp, align 4
  %i = alloca i64, align 8
  store i64 1, ptr %result, align 4
  store i64 0, ptr %i, align 4
  br label %loop_15

loop_15:                                          ; preds = %body_15, %entry
  %rval = load i64, ptr %i, align 4
  %rval1 = load i64, ptr %exp, align 4
  %lttmp = icmp slt i64 %rval, %rval1
  br i1 %lttmp, label %body_15, label %merge_15

body_15:                                          ; preds = %loop_15
  %rval2 = load i64, ptr %result, align 4
  %rval3 = load i64, ptr %base, align 4
  %multmp = mul i64 %rval2, %rval3
  store i64 %multmp, ptr %result, align 4
  %rval4 = load i64, ptr %i, align 4
  %addtmp = add i64 %rval4, 1
  store i64 %addtmp, ptr %i, align 4
  br label %loop_15

merge_15:                                         ; preds = %loop_15
  %rval5 = load i64, ptr %result, align 4
  ret i64 %rval5
}

define i8 @seive_fn(ptr %0, i64 %1) {
entry:
  %candidates = alloca ptr, align 8
  %n = alloca i64, align 8
  store ptr %0, ptr %candidates, align 8
  %i = alloca i64, align 8
  store i64 %1, ptr %n, align 4
  store i64 2, ptr %i, align 4
  %j = alloca i64, align 8
  br label %loop_24

loop_24:                                          ; preds = %merge_30, %then, %entry
  %rval = load i64, ptr %i, align 4
  %rval1 = load i64, ptr %n, align 4
  %lttmp = icmp slt i64 %rval, %rval1
  br i1 %lttmp, label %body_24, label %merge_24

body_24:                                          ; preds = %loop_24
  %rval2 = load ptr, ptr %candidates, align 8
  %rval3 = load i64, ptr %i, align 4
  %indexptr = getelementptr i64, ptr %rval2, i64 %rval3
  %rval4 = load i64, ptr %indexptr, align 4
  %eqtmp = icmp eq i64 %rval4, 0
  br i1 %eqtmp, label %then, label %else

merge_24:                                         ; preds = %loop_24
  ret i8 0

then:                                             ; preds = %body_24
  %rval5 = load i64, ptr %i, align 4
  %addtmp = add i64 %rval5, 1
  store i64 %addtmp, ptr %i, align 4
  br label %loop_24

else:                                             ; preds = %body_24
  br label %ifcont

ifcont:                                           ; preds = %else
  %rval6 = load i64, ptr %i, align 4
  %rval7 = load i64, ptr %i, align 4
  %addtmp8 = add i64 %rval6, %rval7
  store i64 %addtmp8, ptr %j, align 4
  br label %loop_30

loop_30:                                          ; preds = %body_30, %ifcont
  %rval9 = load i64, ptr %j, align 4
  %rval10 = load i64, ptr %n, align 4
  %lttmp11 = icmp slt i64 %rval9, %rval10
  br i1 %lttmp11, label %body_30, label %merge_30

body_30:                                          ; preds = %loop_30
  %rval12 = load ptr, ptr %candidates, align 8
  %rval13 = load i64, ptr %j, align 4
  %indexptr14 = getelementptr i64, ptr %rval12, i64 %rval13
  store i64 0, ptr %indexptr14, align 4
  %rval15 = load i64, ptr %j, align 4
  %rval16 = load i64, ptr %i, align 4
  %addtmp17 = add i64 %rval15, %rval16
  store i64 %addtmp17, ptr %j, align 4
  br label %loop_30

merge_30:                                         ; preds = %loop_30
  %rval18 = load i64, ptr %i, align 4
  %addtmp19 = add i64 %rval18, 1
  store i64 %addtmp19, ptr %i, align 4
  br label %loop_24
}

define i64 @main_fn() {
entry:
  %i = alloca i64, align 8
  store i64 0, ptr %i, align 4
  %calltmp5 = alloca i8, align 1
  %last_prime = alloca i64, align 8
  %result = alloca i64, align 8
  %j = alloca i64, align 8
  %calltmp95 = alloca i64, align 8
  %calltmp101 = alloca i64, align 8
  br label %loop_48

loop_48:                                          ; preds = %body_48, %entry
  %rval = load i64, ptr %i, align 4
  %lttmp = icmp slt i64 %rval, 1000000
  br i1 %lttmp, label %body_48, label %merge_48

body_48:                                          ; preds = %loop_48
  %rval1 = load i64, ptr %i, align 4
  %rval2 = load i64, ptr %i, align 4
  %indexptr = getelementptr i64, ptr @PRIMES, i64 %rval2
  store i64 %rval1, ptr %indexptr, align 4
  %rval3 = load i64, ptr %i, align 4
  %addtmp = add i64 %rval3, 1
  store i64 %addtmp, ptr %i, align 4
  br label %loop_48

merge_48:                                         ; preds = %loop_48
  %rval4 = load { ptr }, ptr @seive, align 8
  %fnptr = extractvalue { ptr } %rval4, 0
  %calltmp = call i8 %fnptr(ptr @PRIMES, i64 1000000)
  store i8 %calltmp, ptr %calltmp5, align 1
  store i64 3, ptr %i, align 4
  store i64 2, ptr %last_prime, align 4
  br label %loop_58

loop_58:                                          ; preds = %ifcont, %merge_48
  %rval6 = load i64, ptr %i, align 4
  %lttmp7 = icmp slt i64 %rval6, 1000000
  br i1 %lttmp7, label %body_58, label %merge_58

body_58:                                          ; preds = %loop_58
  %rval8 = load i64, ptr %i, align 4
  %indexptr9 = getelementptr i64, ptr @PRIMES, i64 %rval8
  %rval10 = load i64, ptr %indexptr9, align 4
  %neqtmp = icmp ne i64 %rval10, 0
  br i1 %neqtmp, label %then, label %else

merge_58:                                         ; preds = %loop_58
  store i64 0, ptr %result, align 4
  store i64 0, ptr %i, align 4
  store i64 0, ptr %j, align 4
  br label %loop_70

then:                                             ; preds = %body_58
  %rval11 = load i64, ptr %last_prime, align 4
  %remtmp = srem i64 %rval11, 10
  %indexptr12 = getelementptr [10 x i64], ptr @transitions, i64 %remtmp
  %rval13 = load i64, ptr %i, align 4
  %indexptr14 = getelementptr i64, ptr @PRIMES, i64 %rval13
  %rval15 = load i64, ptr %indexptr14, align 4
  %remtmp16 = srem i64 %rval15, 10
  %indexptr17 = getelementptr i64, ptr %indexptr12, i64 %remtmp16
  %rval18 = load i64, ptr %indexptr17, align 4
  %addtmp19 = add i64 %rval18, 1
  %rval20 = load i64, ptr %last_prime, align 4
  %remtmp21 = srem i64 %rval20, 10
  %indexptr22 = getelementptr [10 x i64], ptr @transitions, i64 %remtmp21
  %rval23 = load i64, ptr %i, align 4
  %indexptr24 = getelementptr i64, ptr @PRIMES, i64 %rval23
  %rval25 = load i64, ptr %indexptr24, align 4
  %remtmp26 = srem i64 %rval25, 10
  %indexptr27 = getelementptr i64, ptr %indexptr22, i64 %remtmp26
  store i64 %addtmp19, ptr %indexptr27, align 4
  %rval28 = load i64, ptr %i, align 4
  %indexptr29 = getelementptr i64, ptr @PRIMES, i64 %rval28
  %rval30 = load i64, ptr %indexptr29, align 4
  store i64 %rval30, ptr %last_prime, align 4
  br label %ifcont

else:                                             ; preds = %body_58
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %rval31 = load i64, ptr %i, align 4
  %addtmp32 = add i64 %rval31, 1
  store i64 %addtmp32, ptr %i, align 4
  br label %loop_58

loop_70:                                          ; preds = %merge_76, %then35, %merge_58
  %rval33 = load i64, ptr %i, align 4
  %lttmp34 = icmp slt i64 %rval33, 10
  br i1 %lttmp34, label %body_70, label %merge_70

body_70:                                          ; preds = %loop_70
  %rval38 = load i64, ptr %i, align 4
  %neqtmp39 = icmp ne i64 %rval38, 1
  br i1 %neqtmp39, label %rhs, label %merge

merge_70:                                         ; preds = %loop_70
  %rval120 = load i64, ptr %result, align 4
  ret i64 %rval120

then35:                                           ; preds = %merge
  %rval57 = load i64, ptr %i, align 4
  %addtmp58 = add i64 %rval57, 1
  store i64 %addtmp58, ptr %i, align 4
  br label %loop_70

else36:                                           ; preds = %merge
  br label %ifcont37

ifcont37:                                         ; preds = %else36
  %rval59 = load ptr, ptr @printf, align 8
  %calltmp60 = call i8 (ptr, ...) @printf(ptr @str)
  br label %loop_76

rhs:                                              ; preds = %body_70
  %rval42 = load i64, ptr %i, align 4
  %neqtmp43 = icmp ne i64 %rval42, 2
  br i1 %neqtmp43, label %rhs40, label %merge41

merge:                                            ; preds = %merge41, %body_70
  %logicaltmp56 = phi i1 [ %neqtmp39, %body_70 ], [ %logicaltmp55, %merge41 ]
  br i1 %logicaltmp56, label %then35, label %else36

rhs40:                                            ; preds = %rhs
  %rval46 = load i64, ptr %i, align 4
  %neqtmp47 = icmp ne i64 %rval46, 3
  br i1 %neqtmp47, label %rhs44, label %merge45

merge41:                                          ; preds = %merge45, %rhs
  %logicaltmp55 = phi i1 [ %neqtmp43, %rhs ], [ %logicaltmp54, %merge45 ]
  br label %merge

rhs44:                                            ; preds = %rhs40
  %rval50 = load i64, ptr %i, align 4
  %neqtmp51 = icmp ne i64 %rval50, 5
  br i1 %neqtmp51, label %rhs48, label %merge49

merge45:                                          ; preds = %merge49, %rhs40
  %logicaltmp54 = phi i1 [ %neqtmp47, %rhs40 ], [ %logicaltmp, %merge49 ]
  br label %merge41

rhs48:                                            ; preds = %rhs44
  %rval52 = load i64, ptr %i, align 4
  %neqtmp53 = icmp ne i64 %rval52, 7
  br label %merge49

merge49:                                          ; preds = %rhs48, %rhs44
  %logicaltmp = phi i1 [ %neqtmp51, %rhs44 ], [ %neqtmp53, %rhs48 ]
  br label %merge45

loop_76:                                          ; preds = %ifcont65, %then63, %ifcont37
  %rval61 = load i64, ptr %j, align 4
  %lttmp62 = icmp slt i64 %rval61, 10
  br i1 %lttmp62, label %body_76, label %merge_76

body_76:                                          ; preds = %loop_76
  %rval68 = load i64, ptr %j, align 4
  %neqtmp69 = icmp ne i64 %rval68, 1
  br i1 %neqtmp69, label %rhs66, label %merge67

merge_76:                                         ; preds = %loop_76
  %rval116 = load ptr, ptr @printf, align 8
  %calltmp117 = call i8 (ptr, ...) @printf(ptr @str.2)
  %rval118 = load i64, ptr %i, align 4
  %addtmp119 = add i64 %rval118, 1
  store i64 %addtmp119, ptr %i, align 4
  store i64 0, ptr %j, align 4
  br label %loop_70

then63:                                           ; preds = %merge67
  %rval83 = load i64, ptr %j, align 4
  %addtmp84 = add i64 %rval83, 1
  store i64 %addtmp84, ptr %j, align 4
  br label %loop_76

else64:                                           ; preds = %merge67
  br label %ifcont65

ifcont65:                                         ; preds = %else64
  %rval85 = load i64, ptr %result, align 4
  %rval86 = load i64, ptr %i, align 4
  %indexptr87 = getelementptr [10 x i64], ptr @transitions, i64 %rval86
  %rval88 = load i64, ptr %j, align 4
  %indexptr89 = getelementptr i64, ptr %indexptr87, i64 %rval88
  %rval90 = load i64, ptr %indexptr89, align 4
  %rval91 = load { ptr }, ptr @pow, align 8
  %rval92 = load i64, ptr %i, align 4
  %fnptr93 = extractvalue { ptr } %rval91, 0
  %calltmp94 = call i64 %fnptr93(i64 2, i64 %rval92)
  store i64 %calltmp94, ptr %calltmp95, align 4
  %rval96 = load i64, ptr %calltmp95, align 4
  %multmp = mul i64 %rval90, %rval96
  %rval97 = load { ptr }, ptr @pow, align 8
  %rval98 = load i64, ptr %j, align 4
  %fnptr99 = extractvalue { ptr } %rval97, 0
  %calltmp100 = call i64 %fnptr99(i64 3, i64 %rval98)
  store i64 %calltmp100, ptr %calltmp101, align 4
  %rval102 = load i64, ptr %calltmp101, align 4
  %multmp103 = mul i64 %multmp, %rval102
  %addtmp104 = add i64 %rval85, %multmp103
  store i64 %addtmp104, ptr %result, align 4
  %rval105 = load ptr, ptr @printf, align 8
  %rval106 = load i64, ptr %i, align 4
  %rval107 = load i64, ptr %j, align 4
  %rval108 = load i64, ptr %i, align 4
  %indexptr109 = getelementptr [10 x i64], ptr @transitions, i64 %rval108
  %rval110 = load i64, ptr %j, align 4
  %indexptr111 = getelementptr i64, ptr %indexptr109, i64 %rval110
  %rval112 = load i64, ptr %indexptr111, align 4
  %calltmp113 = call i8 (ptr, ...) @printf(ptr @str.1, i64 %rval106, i64 %rval107, i64 %rval112)
  %rval114 = load i64, ptr %j, align 4
  %addtmp115 = add i64 %rval114, 1
  store i64 %addtmp115, ptr %j, align 4
  br label %loop_76

rhs66:                                            ; preds = %body_76
  %rval72 = load i64, ptr %j, align 4
  %neqtmp73 = icmp ne i64 %rval72, 3
  br i1 %neqtmp73, label %rhs70, label %merge71

merge67:                                          ; preds = %merge71, %body_76
  %logicaltmp82 = phi i1 [ %neqtmp69, %body_76 ], [ %logicaltmp81, %merge71 ]
  br i1 %logicaltmp82, label %then63, label %else64

rhs70:                                            ; preds = %rhs66
  %rval76 = load i64, ptr %j, align 4
  %neqtmp77 = icmp ne i64 %rval76, 5
  br i1 %neqtmp77, label %rhs74, label %merge75

merge71:                                          ; preds = %merge75, %rhs66
  %logicaltmp81 = phi i1 [ %neqtmp73, %rhs66 ], [ %logicaltmp80, %merge75 ]
  br label %merge67

rhs74:                                            ; preds = %rhs70
  %rval78 = load i64, ptr %j, align 4
  %neqtmp79 = icmp ne i64 %rval78, 7
  br label %merge75

merge75:                                          ; preds = %rhs74, %rhs70
  %logicaltmp80 = phi i1 [ %neqtmp77, %rhs70 ], [ %neqtmp79, %rhs74 ]
  br label %merge71
}

[32m INFO[0m [2mserenity[0m[2m:[0m Execution engine created
[32m INFO[0m [2mserenity[0m[2m:[0m Calling main function
